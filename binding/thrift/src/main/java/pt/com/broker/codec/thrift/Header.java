/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pt.com.broker.codec.thrift;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

class Header implements org.apache.thrift.TBase<Header, Header._Fields>, java.io.Serializable, Cloneable, Comparable<Header>
{
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Header");

	private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.MAP, (short) 1);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static
	{
		schemes.put(StandardScheme.class, new HeaderStandardSchemeFactory());
		schemes.put(TupleScheme.class, new HeaderTupleSchemeFactory());
	}

	public Map<String, String> parameters; // required

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum
	{
		PARAMETERS((short) 1, "parameters");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static
		{
			for (_Fields field : EnumSet.allOf(_Fields.class))
			{
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId)
		{
			switch (fieldId)
			{
			case 1: // PARAMETERS
				return PARAMETERS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId)
		{
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name)
		{
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName)
		{
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId()
		{
			return _thriftId;
		}

		public String getFieldName()
		{
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static
	{
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Header.class, metaDataMap);
	}

	public Header()
	{
	}

	public Header(
			Map<String, String> parameters)
	{
		this();
		this.parameters = parameters;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Header(Header other)
	{
		if (other.isSetParameters())
		{
			Map<String, String> __this__parameters = new HashMap<String, String>(other.parameters);
			this.parameters = __this__parameters;
		}
	}

	public Header deepCopy()
	{
		return new Header(this);
	}

	@Override
	public void clear()
	{
		this.parameters = null;
	}

	public int getParametersSize()
	{
		return (this.parameters == null) ? 0 : this.parameters.size();
	}

	public void putToParameters(String key, String val)
	{
		if (this.parameters == null)
		{
			this.parameters = new HashMap<String, String>();
		}
		this.parameters.put(key, val);
	}

	public Map<String, String> getParameters()
	{
		return this.parameters;
	}

	public Header setParameters(Map<String, String> parameters)
	{
		this.parameters = parameters;
		return this;
	}

	public void unsetParameters()
	{
		this.parameters = null;
	}

	/** Returns true if field parameters is set (has been assigned a value) and false otherwise */
	public boolean isSetParameters()
	{
		return this.parameters != null;
	}

	public void setParametersIsSet(boolean value)
	{
		if (!value)
		{
			this.parameters = null;
		}
	}

	public void setFieldValue(_Fields field, Object value)
	{
		switch (field)
		{
		case PARAMETERS:
			if (value == null)
			{
				unsetParameters();
			}
			else
			{
				setParameters((Map<String, String>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field)
	{
		switch (field)
		{
		case PARAMETERS:
			return getParameters();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field)
	{
		if (field == null)
		{
			throw new IllegalArgumentException();
		}

		switch (field)
		{
		case PARAMETERS:
			return isSetParameters();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that)
	{
		if (that == null)
			return false;
		if (that instanceof Header)
			return this.equals((Header) that);
		return false;
	}

	public boolean equals(Header that)
	{
		if (that == null)
			return false;

		boolean this_present_parameters = true && this.isSetParameters();
		boolean that_present_parameters = true && that.isSetParameters();
		if (this_present_parameters || that_present_parameters)
		{
			if (!(this_present_parameters && that_present_parameters))
				return false;
			if (!this.parameters.equals(that.parameters))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode()
	{
		return 0;
	}

	@Override
	public int compareTo(Header other)
	{
		if (!getClass().equals(other.getClass()))
		{
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetParameters())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId)
	{
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
	{
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
	{
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder("Header(");
		boolean first = true;

		sb.append("parameters:");
		if (this.parameters == null)
		{
			sb.append("null");
		}
		else
		{
			sb.append(this.parameters);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException
	{
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
	{
		try
		{
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te)
		{
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
	{
		try
		{
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te)
		{
			throw new java.io.IOException(te);
		}
	}

	private static class HeaderStandardSchemeFactory implements SchemeFactory
	{
		public HeaderStandardScheme getScheme()
		{
			return new HeaderStandardScheme();
		}
	}

	private static class HeaderStandardScheme extends StandardScheme<Header>
	{

		public void read(org.apache.thrift.protocol.TProtocol iprot, Header struct) throws org.apache.thrift.TException
		{
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true)
			{
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
				{
					break;
				}
				switch (schemeField.id)
				{
				case 1: // PARAMETERS
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP)
					{
						{
							org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
							struct.parameters = new HashMap<String, String>(2 * _map0.size);
							for (int _i1 = 0; _i1 < _map0.size; ++_i1)
							{
								String _key2;
								String _val3;
								_key2 = iprot.readString();
								_val3 = iprot.readString();
								struct.parameters.put(_key2, _val3);
							}
							iprot.readMapEnd();
						}
						struct.setParametersIsSet(true);
					}
					else
					{
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Header struct) throws org.apache.thrift.TException
		{
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.parameters != null)
			{
				oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameters.size()));
					for (Map.Entry<String, String> _iter4 : struct.parameters.entrySet())
					{
						oprot.writeString(_iter4.getKey());
						oprot.writeString(_iter4.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class HeaderTupleSchemeFactory implements SchemeFactory
	{
		public HeaderTupleScheme getScheme()
		{
			return new HeaderTupleScheme();
		}
	}

	private static class HeaderTupleScheme extends TupleScheme<Header>
	{

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Header struct) throws org.apache.thrift.TException
		{
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetParameters())
			{
				optionals.set(0);
			}
			oprot.writeBitSet(optionals, 1);
			if (struct.isSetParameters())
			{
				{
					oprot.writeI32(struct.parameters.size());
					for (Map.Entry<String, String> _iter5 : struct.parameters.entrySet())
					{
						oprot.writeString(_iter5.getKey());
						oprot.writeString(_iter5.getValue());
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Header struct) throws org.apache.thrift.TException
		{
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.get(0))
			{
				{
					org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.parameters = new HashMap<String, String>(2 * _map6.size);
					for (int _i7 = 0; _i7 < _map6.size; ++_i7)
					{
						String _key8;
						String _val9;
						_key8 = iprot.readString();
						_val9 = iprot.readString();
						struct.parameters.put(_key8, _val9);
					}
				}
				struct.setParametersIsSet(true);
			}
		}
	}

}
