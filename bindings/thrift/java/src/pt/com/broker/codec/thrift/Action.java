/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package pt.com.broker.codec.thrift;

import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

class Action implements org.apache.thrift.TBase<Action, Action._Fields>, java.io.Serializable, Cloneable
{
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Action");

	private static final org.apache.thrift.protocol.TField PUBLISH_FIELD_DESC = new org.apache.thrift.protocol.TField("publish", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
	private static final org.apache.thrift.protocol.TField POLL_FIELD_DESC = new org.apache.thrift.protocol.TField("poll", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
	private static final org.apache.thrift.protocol.TField ACCEPTED_FIELD_DESC = new org.apache.thrift.protocol.TField("accepted", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
	private static final org.apache.thrift.protocol.TField ACK_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ack_message", org.apache.thrift.protocol.TType.STRUCT, (short) 4);
	private static final org.apache.thrift.protocol.TField SUBSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribe", org.apache.thrift.protocol.TType.STRUCT, (short) 5);
	private static final org.apache.thrift.protocol.TField UNSUBSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField("unsubscribe", org.apache.thrift.protocol.TType.STRUCT, (short) 6);
	private static final org.apache.thrift.protocol.TField NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notification", org.apache.thrift.protocol.TType.STRUCT, (short) 7);
	private static final org.apache.thrift.protocol.TField FAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("fault", org.apache.thrift.protocol.TType.STRUCT, (short) 8);
	private static final org.apache.thrift.protocol.TField PING_FIELD_DESC = new org.apache.thrift.protocol.TField("ping", org.apache.thrift.protocol.TType.STRUCT, (short) 9);
	private static final org.apache.thrift.protocol.TField PONG_FIELD_DESC = new org.apache.thrift.protocol.TField("pong", org.apache.thrift.protocol.TType.STRUCT, (short) 10);
	private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short) 11);
	private static final org.apache.thrift.protocol.TField ACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("action_type", org.apache.thrift.protocol.TType.I32, (short) 12);

	public Publish publish;
	public Poll poll;
	public Accepted accepted;
	public Acknowledge ack_message;
	public Subscribe subscribe;
	public Unsubscribe unsubscribe;
	public Notification notification;
	public Fault fault;
	public Ping ping;
	public Pong pong;
	public Authentication auth;
	/**
	 * 
	 * @see ActionType
	 */
	public ActionType action_type;

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum
	{
		PUBLISH((short) 1, "publish"), POLL((short) 2, "poll"), ACCEPTED((short) 3, "accepted"), ACK_MESSAGE((short) 4, "ack_message"), SUBSCRIBE((short) 5, "subscribe"), UNSUBSCRIBE((short) 6, "unsubscribe"), NOTIFICATION((short) 7, "notification"), FAULT((short) 8, "fault"), PING((short) 9, "ping"), PONG((short) 10, "pong"), AUTH((short) 11, "auth"),
		/**
		 * 
		 * @see ActionType
		 */
		ACTION_TYPE((short) 12, "action_type");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static
		{
			for (_Fields field : EnumSet.allOf(_Fields.class))
			{
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId)
		{
			switch (fieldId)
			{
			case 1: // PUBLISH
				return PUBLISH;
			case 2: // POLL
				return POLL;
			case 3: // ACCEPTED
				return ACCEPTED;
			case 4: // ACK_MESSAGE
				return ACK_MESSAGE;
			case 5: // SUBSCRIBE
				return SUBSCRIBE;
			case 6: // UNSUBSCRIBE
				return UNSUBSCRIBE;
			case 7: // NOTIFICATION
				return NOTIFICATION;
			case 8: // FAULT
				return FAULT;
			case 9: // PING
				return PING;
			case 10: // PONG
				return PONG;
			case 11: // AUTH
				return AUTH;
			case 12: // ACTION_TYPE
				return ACTION_TYPE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId)
		{
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name)
		{
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName)
		{
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId()
		{
			return _thriftId;
		}

		public String getFieldName()
		{
			return _fieldName;
		}
	}

	// isset id assignments

	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static
	{
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.PUBLISH, new org.apache.thrift.meta_data.FieldMetaData("publish", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Publish.class)));
		tmpMap.put(_Fields.POLL, new org.apache.thrift.meta_data.FieldMetaData("poll", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Poll.class)));
		tmpMap.put(_Fields.ACCEPTED, new org.apache.thrift.meta_data.FieldMetaData("accepted", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Accepted.class)));
		tmpMap.put(_Fields.ACK_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("ack_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Acknowledge.class)));
		tmpMap.put(_Fields.SUBSCRIBE, new org.apache.thrift.meta_data.FieldMetaData("subscribe", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Subscribe.class)));
		tmpMap.put(_Fields.UNSUBSCRIBE, new org.apache.thrift.meta_data.FieldMetaData("unsubscribe", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unsubscribe.class)));
		tmpMap.put(_Fields.NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("notification", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Notification.class)));
		tmpMap.put(_Fields.FAULT, new org.apache.thrift.meta_data.FieldMetaData("fault", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Fault.class)));
		tmpMap.put(_Fields.PING, new org.apache.thrift.meta_data.FieldMetaData("ping", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Ping.class)));
		tmpMap.put(_Fields.PONG, new org.apache.thrift.meta_data.FieldMetaData("pong", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pong.class)));
		tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
		tmpMap.put(_Fields.ACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("action_type", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ActionType.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Action.class, metaDataMap);
	}

	public Action()
	{
	}

	public Action(ActionType action_type)
	{
		this();
		this.action_type = action_type;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Action(Action other)
	{
		if (other.isSetPublish())
		{
			this.publish = new Publish(other.publish);
		}
		if (other.isSetPoll())
		{
			this.poll = new Poll(other.poll);
		}
		if (other.isSetAccepted())
		{
			this.accepted = new Accepted(other.accepted);
		}
		if (other.isSetAck_message())
		{
			this.ack_message = new Acknowledge(other.ack_message);
		}
		if (other.isSetSubscribe())
		{
			this.subscribe = new Subscribe(other.subscribe);
		}
		if (other.isSetUnsubscribe())
		{
			this.unsubscribe = new Unsubscribe(other.unsubscribe);
		}
		if (other.isSetNotification())
		{
			this.notification = new Notification(other.notification);
		}
		if (other.isSetFault())
		{
			this.fault = new Fault(other.fault);
		}
		if (other.isSetPing())
		{
			this.ping = new Ping(other.ping);
		}
		if (other.isSetPong())
		{
			this.pong = new Pong(other.pong);
		}
		if (other.isSetAuth())
		{
			this.auth = new Authentication(other.auth);
		}
		if (other.isSetAction_type())
		{
			this.action_type = other.action_type;
		}
	}

	public Action deepCopy()
	{
		return new Action(this);
	}

	@Override
	public void clear()
	{
		this.publish = null;
		this.poll = null;
		this.accepted = null;
		this.ack_message = null;
		this.subscribe = null;
		this.unsubscribe = null;
		this.notification = null;
		this.fault = null;
		this.ping = null;
		this.pong = null;
		this.auth = null;
		this.action_type = null;
	}

	public Publish getPublish()
	{
		return this.publish;
	}

	public Action setPublish(Publish publish)
	{
		this.publish = publish;
		return this;
	}

	public void unsetPublish()
	{
		this.publish = null;
	}

	/** Returns true if field publish is set (has been assigned a value) and false otherwise */
	public boolean isSetPublish()
	{
		return this.publish != null;
	}

	public void setPublishIsSet(boolean value)
	{
		if (!value)
		{
			this.publish = null;
		}
	}

	public Poll getPoll()
	{
		return this.poll;
	}

	public Action setPoll(Poll poll)
	{
		this.poll = poll;
		return this;
	}

	public void unsetPoll()
	{
		this.poll = null;
	}

	/** Returns true if field poll is set (has been assigned a value) and false otherwise */
	public boolean isSetPoll()
	{
		return this.poll != null;
	}

	public void setPollIsSet(boolean value)
	{
		if (!value)
		{
			this.poll = null;
		}
	}

	public Accepted getAccepted()
	{
		return this.accepted;
	}

	public Action setAccepted(Accepted accepted)
	{
		this.accepted = accepted;
		return this;
	}

	public void unsetAccepted()
	{
		this.accepted = null;
	}

	/** Returns true if field accepted is set (has been assigned a value) and false otherwise */
	public boolean isSetAccepted()
	{
		return this.accepted != null;
	}

	public void setAcceptedIsSet(boolean value)
	{
		if (!value)
		{
			this.accepted = null;
		}
	}

	public Acknowledge getAck_message()
	{
		return this.ack_message;
	}

	public Action setAck_message(Acknowledge ack_message)
	{
		this.ack_message = ack_message;
		return this;
	}

	public void unsetAck_message()
	{
		this.ack_message = null;
	}

	/** Returns true if field ack_message is set (has been assigned a value) and false otherwise */
	public boolean isSetAck_message()
	{
		return this.ack_message != null;
	}

	public void setAck_messageIsSet(boolean value)
	{
		if (!value)
		{
			this.ack_message = null;
		}
	}

	public Subscribe getSubscribe()
	{
		return this.subscribe;
	}

	public Action setSubscribe(Subscribe subscribe)
	{
		this.subscribe = subscribe;
		return this;
	}

	public void unsetSubscribe()
	{
		this.subscribe = null;
	}

	/** Returns true if field subscribe is set (has been assigned a value) and false otherwise */
	public boolean isSetSubscribe()
	{
		return this.subscribe != null;
	}

	public void setSubscribeIsSet(boolean value)
	{
		if (!value)
		{
			this.subscribe = null;
		}
	}

	public Unsubscribe getUnsubscribe()
	{
		return this.unsubscribe;
	}

	public Action setUnsubscribe(Unsubscribe unsubscribe)
	{
		this.unsubscribe = unsubscribe;
		return this;
	}

	public void unsetUnsubscribe()
	{
		this.unsubscribe = null;
	}

	/** Returns true if field unsubscribe is set (has been assigned a value) and false otherwise */
	public boolean isSetUnsubscribe()
	{
		return this.unsubscribe != null;
	}

	public void setUnsubscribeIsSet(boolean value)
	{
		if (!value)
		{
			this.unsubscribe = null;
		}
	}

	public Notification getNotification()
	{
		return this.notification;
	}

	public Action setNotification(Notification notification)
	{
		this.notification = notification;
		return this;
	}

	public void unsetNotification()
	{
		this.notification = null;
	}

	/** Returns true if field notification is set (has been assigned a value) and false otherwise */
	public boolean isSetNotification()
	{
		return this.notification != null;
	}

	public void setNotificationIsSet(boolean value)
	{
		if (!value)
		{
			this.notification = null;
		}
	}

	public Fault getFault()
	{
		return this.fault;
	}

	public Action setFault(Fault fault)
	{
		this.fault = fault;
		return this;
	}

	public void unsetFault()
	{
		this.fault = null;
	}

	/** Returns true if field fault is set (has been assigned a value) and false otherwise */
	public boolean isSetFault()
	{
		return this.fault != null;
	}

	public void setFaultIsSet(boolean value)
	{
		if (!value)
		{
			this.fault = null;
		}
	}

	public Ping getPing()
	{
		return this.ping;
	}

	public Action setPing(Ping ping)
	{
		this.ping = ping;
		return this;
	}

	public void unsetPing()
	{
		this.ping = null;
	}

	/** Returns true if field ping is set (has been assigned a value) and false otherwise */
	public boolean isSetPing()
	{
		return this.ping != null;
	}

	public void setPingIsSet(boolean value)
	{
		if (!value)
		{
			this.ping = null;
		}
	}

	public Pong getPong()
	{
		return this.pong;
	}

	public Action setPong(Pong pong)
	{
		this.pong = pong;
		return this;
	}

	public void unsetPong()
	{
		this.pong = null;
	}

	/** Returns true if field pong is set (has been assigned a value) and false otherwise */
	public boolean isSetPong()
	{
		return this.pong != null;
	}

	public void setPongIsSet(boolean value)
	{
		if (!value)
		{
			this.pong = null;
		}
	}

	public Authentication getAuth()
	{
		return this.auth;
	}

	public Action setAuth(Authentication auth)
	{
		this.auth = auth;
		return this;
	}

	public void unsetAuth()
	{
		this.auth = null;
	}

	/** Returns true if field auth is set (has been assigned a value) and false otherwise */
	public boolean isSetAuth()
	{
		return this.auth != null;
	}

	public void setAuthIsSet(boolean value)
	{
		if (!value)
		{
			this.auth = null;
		}
	}

	/**
	 * 
	 * @see ActionType
	 */
	public ActionType getAction_type()
	{
		return this.action_type;
	}

	/**
	 * 
	 * @see ActionType
	 */
	public Action setAction_type(ActionType action_type)
	{
		this.action_type = action_type;
		return this;
	}

	public void unsetAction_type()
	{
		this.action_type = null;
	}

	/** Returns true if field action_type is set (has been assigned a value) and false otherwise */
	public boolean isSetAction_type()
	{
		return this.action_type != null;
	}

	public void setAction_typeIsSet(boolean value)
	{
		if (!value)
		{
			this.action_type = null;
		}
	}

	public void setFieldValue(_Fields field, Object value)
	{
		switch (field)
		{
		case PUBLISH:
			if (value == null)
			{
				unsetPublish();
			}
			else
			{
				setPublish((Publish) value);
			}
			break;

		case POLL:
			if (value == null)
			{
				unsetPoll();
			}
			else
			{
				setPoll((Poll) value);
			}
			break;

		case ACCEPTED:
			if (value == null)
			{
				unsetAccepted();
			}
			else
			{
				setAccepted((Accepted) value);
			}
			break;

		case ACK_MESSAGE:
			if (value == null)
			{
				unsetAck_message();
			}
			else
			{
				setAck_message((Acknowledge) value);
			}
			break;

		case SUBSCRIBE:
			if (value == null)
			{
				unsetSubscribe();
			}
			else
			{
				setSubscribe((Subscribe) value);
			}
			break;

		case UNSUBSCRIBE:
			if (value == null)
			{
				unsetUnsubscribe();
			}
			else
			{
				setUnsubscribe((Unsubscribe) value);
			}
			break;

		case NOTIFICATION:
			if (value == null)
			{
				unsetNotification();
			}
			else
			{
				setNotification((Notification) value);
			}
			break;

		case FAULT:
			if (value == null)
			{
				unsetFault();
			}
			else
			{
				setFault((Fault) value);
			}
			break;

		case PING:
			if (value == null)
			{
				unsetPing();
			}
			else
			{
				setPing((Ping) value);
			}
			break;

		case PONG:
			if (value == null)
			{
				unsetPong();
			}
			else
			{
				setPong((Pong) value);
			}
			break;

		case AUTH:
			if (value == null)
			{
				unsetAuth();
			}
			else
			{
				setAuth((Authentication) value);
			}
			break;

		case ACTION_TYPE:
			if (value == null)
			{
				unsetAction_type();
			}
			else
			{
				setAction_type((ActionType) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field)
	{
		switch (field)
		{
		case PUBLISH:
			return getPublish();

		case POLL:
			return getPoll();

		case ACCEPTED:
			return getAccepted();

		case ACK_MESSAGE:
			return getAck_message();

		case SUBSCRIBE:
			return getSubscribe();

		case UNSUBSCRIBE:
			return getUnsubscribe();

		case NOTIFICATION:
			return getNotification();

		case FAULT:
			return getFault();

		case PING:
			return getPing();

		case PONG:
			return getPong();

		case AUTH:
			return getAuth();

		case ACTION_TYPE:
			return getAction_type();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field)
	{
		if (field == null)
		{
			throw new IllegalArgumentException();
		}

		switch (field)
		{
		case PUBLISH:
			return isSetPublish();
		case POLL:
			return isSetPoll();
		case ACCEPTED:
			return isSetAccepted();
		case ACK_MESSAGE:
			return isSetAck_message();
		case SUBSCRIBE:
			return isSetSubscribe();
		case UNSUBSCRIBE:
			return isSetUnsubscribe();
		case NOTIFICATION:
			return isSetNotification();
		case FAULT:
			return isSetFault();
		case PING:
			return isSetPing();
		case PONG:
			return isSetPong();
		case AUTH:
			return isSetAuth();
		case ACTION_TYPE:
			return isSetAction_type();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that)
	{
		if (that == null)
			return false;
		if (that instanceof Action)
			return this.equals((Action) that);
		return false;
	}

	public boolean equals(Action that)
	{
		if (that == null)
			return false;

		boolean this_present_publish = true && this.isSetPublish();
		boolean that_present_publish = true && that.isSetPublish();
		if (this_present_publish || that_present_publish)
		{
			if (!(this_present_publish && that_present_publish))
				return false;
			if (!this.publish.equals(that.publish))
				return false;
		}

		boolean this_present_poll = true && this.isSetPoll();
		boolean that_present_poll = true && that.isSetPoll();
		if (this_present_poll || that_present_poll)
		{
			if (!(this_present_poll && that_present_poll))
				return false;
			if (!this.poll.equals(that.poll))
				return false;
		}

		boolean this_present_accepted = true && this.isSetAccepted();
		boolean that_present_accepted = true && that.isSetAccepted();
		if (this_present_accepted || that_present_accepted)
		{
			if (!(this_present_accepted && that_present_accepted))
				return false;
			if (!this.accepted.equals(that.accepted))
				return false;
		}

		boolean this_present_ack_message = true && this.isSetAck_message();
		boolean that_present_ack_message = true && that.isSetAck_message();
		if (this_present_ack_message || that_present_ack_message)
		{
			if (!(this_present_ack_message && that_present_ack_message))
				return false;
			if (!this.ack_message.equals(that.ack_message))
				return false;
		}

		boolean this_present_subscribe = true && this.isSetSubscribe();
		boolean that_present_subscribe = true && that.isSetSubscribe();
		if (this_present_subscribe || that_present_subscribe)
		{
			if (!(this_present_subscribe && that_present_subscribe))
				return false;
			if (!this.subscribe.equals(that.subscribe))
				return false;
		}

		boolean this_present_unsubscribe = true && this.isSetUnsubscribe();
		boolean that_present_unsubscribe = true && that.isSetUnsubscribe();
		if (this_present_unsubscribe || that_present_unsubscribe)
		{
			if (!(this_present_unsubscribe && that_present_unsubscribe))
				return false;
			if (!this.unsubscribe.equals(that.unsubscribe))
				return false;
		}

		boolean this_present_notification = true && this.isSetNotification();
		boolean that_present_notification = true && that.isSetNotification();
		if (this_present_notification || that_present_notification)
		{
			if (!(this_present_notification && that_present_notification))
				return false;
			if (!this.notification.equals(that.notification))
				return false;
		}

		boolean this_present_fault = true && this.isSetFault();
		boolean that_present_fault = true && that.isSetFault();
		if (this_present_fault || that_present_fault)
		{
			if (!(this_present_fault && that_present_fault))
				return false;
			if (!this.fault.equals(that.fault))
				return false;
		}

		boolean this_present_ping = true && this.isSetPing();
		boolean that_present_ping = true && that.isSetPing();
		if (this_present_ping || that_present_ping)
		{
			if (!(this_present_ping && that_present_ping))
				return false;
			if (!this.ping.equals(that.ping))
				return false;
		}

		boolean this_present_pong = true && this.isSetPong();
		boolean that_present_pong = true && that.isSetPong();
		if (this_present_pong || that_present_pong)
		{
			if (!(this_present_pong && that_present_pong))
				return false;
			if (!this.pong.equals(that.pong))
				return false;
		}

		boolean this_present_auth = true && this.isSetAuth();
		boolean that_present_auth = true && that.isSetAuth();
		if (this_present_auth || that_present_auth)
		{
			if (!(this_present_auth && that_present_auth))
				return false;
			if (!this.auth.equals(that.auth))
				return false;
		}

		boolean this_present_action_type = true && this.isSetAction_type();
		boolean that_present_action_type = true && that.isSetAction_type();
		if (this_present_action_type || that_present_action_type)
		{
			if (!(this_present_action_type && that_present_action_type))
				return false;
			if (!this.action_type.equals(that.action_type))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode()
	{
		return 0;
	}

	public int compareTo(Action other)
	{
		if (!getClass().equals(other.getClass()))
		{
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		Action typedOther = (Action) other;

		lastComparison = Boolean.valueOf(isSetPublish()).compareTo(typedOther.isSetPublish());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetPublish())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish, typedOther.publish);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPoll()).compareTo(typedOther.isSetPoll());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetPoll())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poll, typedOther.poll);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAccepted()).compareTo(typedOther.isSetAccepted());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetAccepted())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accepted, typedOther.accepted);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAck_message()).compareTo(typedOther.isSetAck_message());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetAck_message())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ack_message, typedOther.ack_message);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSubscribe()).compareTo(typedOther.isSetSubscribe());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetSubscribe())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribe, typedOther.subscribe);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUnsubscribe()).compareTo(typedOther.isSetUnsubscribe());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetUnsubscribe())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unsubscribe, typedOther.unsubscribe);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNotification()).compareTo(typedOther.isSetNotification());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetNotification())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notification, typedOther.notification);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFault()).compareTo(typedOther.isSetFault());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetFault())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fault, typedOther.fault);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPing()).compareTo(typedOther.isSetPing());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetPing())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ping, typedOther.ping);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPong()).compareTo(typedOther.isSetPong());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetPong())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pong, typedOther.pong);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetAuth())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAction_type()).compareTo(typedOther.isSetAction_type());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetAction_type())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_type, typedOther.action_type);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId)
	{
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
	{
		org.apache.thrift.protocol.TField field;
		iprot.readStructBegin();
		while (true)
		{
			field = iprot.readFieldBegin();
			if (field.type == org.apache.thrift.protocol.TType.STOP)
			{
				break;
			}
			switch (field.id)
			{
			case 1: // PUBLISH
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.publish = new Publish();
					this.publish.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 2: // POLL
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.poll = new Poll();
					this.poll.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 3: // ACCEPTED
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.accepted = new Accepted();
					this.accepted.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 4: // ACK_MESSAGE
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.ack_message = new Acknowledge();
					this.ack_message.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 5: // SUBSCRIBE
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.subscribe = new Subscribe();
					this.subscribe.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 6: // UNSUBSCRIBE
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.unsubscribe = new Unsubscribe();
					this.unsubscribe.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 7: // NOTIFICATION
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.notification = new Notification();
					this.notification.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 8: // FAULT
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.fault = new Fault();
					this.fault.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 9: // PING
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.ping = new Ping();
					this.ping.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 10: // PONG
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.pong = new Pong();
					this.pong.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 11: // AUTH
				if (field.type == org.apache.thrift.protocol.TType.STRUCT)
				{
					this.auth = new Authentication();
					this.auth.read(iprot);
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 12: // ACTION_TYPE
				if (field.type == org.apache.thrift.protocol.TType.I32)
				{
					this.action_type = ActionType.findByValue(iprot.readI32());
				}
				else
				{
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
				}
				break;
			default:
				org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
			}
			iprot.readFieldEnd();
		}
		iprot.readStructEnd();

		// check for required fields of primitive type, which can't be checked in the validate method
		validate();
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
	{
		validate();

		oprot.writeStructBegin(STRUCT_DESC);
		if (this.publish != null)
		{
			if (isSetPublish())
			{
				oprot.writeFieldBegin(PUBLISH_FIELD_DESC);
				this.publish.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.poll != null)
		{
			if (isSetPoll())
			{
				oprot.writeFieldBegin(POLL_FIELD_DESC);
				this.poll.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.accepted != null)
		{
			if (isSetAccepted())
			{
				oprot.writeFieldBegin(ACCEPTED_FIELD_DESC);
				this.accepted.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.ack_message != null)
		{
			if (isSetAck_message())
			{
				oprot.writeFieldBegin(ACK_MESSAGE_FIELD_DESC);
				this.ack_message.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.subscribe != null)
		{
			if (isSetSubscribe())
			{
				oprot.writeFieldBegin(SUBSCRIBE_FIELD_DESC);
				this.subscribe.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.unsubscribe != null)
		{
			if (isSetUnsubscribe())
			{
				oprot.writeFieldBegin(UNSUBSCRIBE_FIELD_DESC);
				this.unsubscribe.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.notification != null)
		{
			if (isSetNotification())
			{
				oprot.writeFieldBegin(NOTIFICATION_FIELD_DESC);
				this.notification.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.fault != null)
		{
			if (isSetFault())
			{
				oprot.writeFieldBegin(FAULT_FIELD_DESC);
				this.fault.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.ping != null)
		{
			if (isSetPing())
			{
				oprot.writeFieldBegin(PING_FIELD_DESC);
				this.ping.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.pong != null)
		{
			if (isSetPong())
			{
				oprot.writeFieldBegin(PONG_FIELD_DESC);
				this.pong.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.auth != null)
		{
			if (isSetAuth())
			{
				oprot.writeFieldBegin(AUTH_FIELD_DESC);
				this.auth.write(oprot);
				oprot.writeFieldEnd();
			}
		}
		if (this.action_type != null)
		{
			oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
			oprot.writeI32(this.action_type.getValue());
			oprot.writeFieldEnd();
		}
		oprot.writeFieldStop();
		oprot.writeStructEnd();
	}

	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder("Action(");
		boolean first = true;

		if (isSetPublish())
		{
			sb.append("publish:");
			if (this.publish == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.publish);
			}
			first = false;
		}
		if (isSetPoll())
		{
			if (!first)
				sb.append(", ");
			sb.append("poll:");
			if (this.poll == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.poll);
			}
			first = false;
		}
		if (isSetAccepted())
		{
			if (!first)
				sb.append(", ");
			sb.append("accepted:");
			if (this.accepted == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.accepted);
			}
			first = false;
		}
		if (isSetAck_message())
		{
			if (!first)
				sb.append(", ");
			sb.append("ack_message:");
			if (this.ack_message == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.ack_message);
			}
			first = false;
		}
		if (isSetSubscribe())
		{
			if (!first)
				sb.append(", ");
			sb.append("subscribe:");
			if (this.subscribe == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.subscribe);
			}
			first = false;
		}
		if (isSetUnsubscribe())
		{
			if (!first)
				sb.append(", ");
			sb.append("unsubscribe:");
			if (this.unsubscribe == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.unsubscribe);
			}
			first = false;
		}
		if (isSetNotification())
		{
			if (!first)
				sb.append(", ");
			sb.append("notification:");
			if (this.notification == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.notification);
			}
			first = false;
		}
		if (isSetFault())
		{
			if (!first)
				sb.append(", ");
			sb.append("fault:");
			if (this.fault == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.fault);
			}
			first = false;
		}
		if (isSetPing())
		{
			if (!first)
				sb.append(", ");
			sb.append("ping:");
			if (this.ping == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.ping);
			}
			first = false;
		}
		if (isSetPong())
		{
			if (!first)
				sb.append(", ");
			sb.append("pong:");
			if (this.pong == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.pong);
			}
			first = false;
		}
		if (isSetAuth())
		{
			if (!first)
				sb.append(", ");
			sb.append("auth:");
			if (this.auth == null)
			{
				sb.append("null");
			}
			else
			{
				sb.append(this.auth);
			}
			first = false;
		}
		if (!first)
			sb.append(", ");
		sb.append("action_type:");
		if (this.action_type == null)
		{
			sb.append("null");
		}
		else
		{
			sb.append(this.action_type);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException
	{
		// check for required fields
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
	{
		try
		{
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te)
		{
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
	{
		try
		{
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te)
		{
			throw new java.io.IOException(te);
		}
	}

}
