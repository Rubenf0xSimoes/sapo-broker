// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "broker.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sapo_broker {

namespace {

const ::google::protobuf::Descriptor* Atom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_BrokerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_BrokerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Publish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Publish_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Poll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Poll_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Accepted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Accepted_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_AcknowledgeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_AcknowledgeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Subscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Unsubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Unsubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Notification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Notification_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Fault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Fault_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Pong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Pong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Authentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Authentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* Atom_Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Atom_Action_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Atom_Action_ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Atom_DestinationType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_broker_2eproto() {
  protobuf_AddDesc_broker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "broker.proto");
  GOOGLE_CHECK(file != NULL);
  Atom_descriptor_ = file->message_type(0);
  static const int Atom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom, action_),
  };
  Atom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_descriptor_,
      Atom::default_instance_,
      Atom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom));
  Atom_Parameter_descriptor_ = Atom_descriptor_->nested_type(0);
  static const int Atom_Parameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Parameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Parameter, value_),
  };
  Atom_Parameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Parameter_descriptor_,
      Atom_Parameter::default_instance_,
      Atom_Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Parameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Parameter));
  Atom_Header_descriptor_ = Atom_descriptor_->nested_type(1);
  static const int Atom_Header_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Header, parameter_),
  };
  Atom_Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Header_descriptor_,
      Atom_Header::default_instance_,
      Atom_Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Header));
  Atom_BrokerMessage_descriptor_ = Atom_descriptor_->nested_type(2);
  static const int Atom_BrokerMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_BrokerMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_BrokerMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_BrokerMessage, expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_BrokerMessage, timestamp_),
  };
  Atom_BrokerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_BrokerMessage_descriptor_,
      Atom_BrokerMessage::default_instance_,
      Atom_BrokerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_BrokerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_BrokerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_BrokerMessage));
  Atom_Publish_descriptor_ = Atom_descriptor_->nested_type(3);
  static const int Atom_Publish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Publish, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Publish, destination_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Publish, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Publish, message_),
  };
  Atom_Publish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Publish_descriptor_,
      Atom_Publish::default_instance_,
      Atom_Publish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Publish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Publish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Publish));
  Atom_Poll_descriptor_ = Atom_descriptor_->nested_type(4);
  static const int Atom_Poll_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Poll, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Poll, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Poll, timeout_),
  };
  Atom_Poll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Poll_descriptor_,
      Atom_Poll::default_instance_,
      Atom_Poll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Poll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Poll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Poll));
  Atom_Accepted_descriptor_ = Atom_descriptor_->nested_type(5);
  static const int Atom_Accepted_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Accepted, action_id_),
  };
  Atom_Accepted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Accepted_descriptor_,
      Atom_Accepted::default_instance_,
      Atom_Accepted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Accepted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Accepted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Accepted));
  Atom_AcknowledgeMessage_descriptor_ = Atom_descriptor_->nested_type(6);
  static const int Atom_AcknowledgeMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_AcknowledgeMessage, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_AcknowledgeMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_AcknowledgeMessage, destination_),
  };
  Atom_AcknowledgeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_AcknowledgeMessage_descriptor_,
      Atom_AcknowledgeMessage::default_instance_,
      Atom_AcknowledgeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_AcknowledgeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_AcknowledgeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_AcknowledgeMessage));
  Atom_Subscribe_descriptor_ = Atom_descriptor_->nested_type(7);
  static const int Atom_Subscribe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Subscribe, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Subscribe, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Subscribe, destination_type_),
  };
  Atom_Subscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Subscribe_descriptor_,
      Atom_Subscribe::default_instance_,
      Atom_Subscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Subscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Subscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Subscribe));
  Atom_Unsubscribe_descriptor_ = Atom_descriptor_->nested_type(8);
  static const int Atom_Unsubscribe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Unsubscribe, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Unsubscribe, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Unsubscribe, destination_type_),
  };
  Atom_Unsubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Unsubscribe_descriptor_,
      Atom_Unsubscribe::default_instance_,
      Atom_Unsubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Unsubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Unsubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Unsubscribe));
  Atom_Notification_descriptor_ = Atom_descriptor_->nested_type(9);
  static const int Atom_Notification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Notification, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Notification, subscription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Notification, destination_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Notification, message_),
  };
  Atom_Notification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Notification_descriptor_,
      Atom_Notification::default_instance_,
      Atom_Notification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Notification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Notification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Notification));
  Atom_Fault_descriptor_ = Atom_descriptor_->nested_type(10);
  static const int Atom_Fault_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Fault, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Fault, fault_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Fault, fault_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Fault, fault_detail_),
  };
  Atom_Fault_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Fault_descriptor_,
      Atom_Fault::default_instance_,
      Atom_Fault_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Fault, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Fault, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Fault));
  Atom_Ping_descriptor_ = Atom_descriptor_->nested_type(11);
  static const int Atom_Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Ping, action_id_),
  };
  Atom_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Ping_descriptor_,
      Atom_Ping::default_instance_,
      Atom_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Ping));
  Atom_Pong_descriptor_ = Atom_descriptor_->nested_type(12);
  static const int Atom_Pong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Pong, action_id_),
  };
  Atom_Pong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Pong_descriptor_,
      Atom_Pong::default_instance_,
      Atom_Pong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Pong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Pong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Pong));
  Atom_Authentication_descriptor_ = Atom_descriptor_->nested_type(13);
  static const int Atom_Authentication_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Authentication, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Authentication, authentication_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Authentication, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Authentication, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Authentication, role_),
  };
  Atom_Authentication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Authentication_descriptor_,
      Atom_Authentication::default_instance_,
      Atom_Authentication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Authentication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Authentication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Authentication));
  Atom_Action_descriptor_ = Atom_descriptor_->nested_type(14);
  static const int Atom_Action_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, publish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, poll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, ack_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, unsubscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, pong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, action_type_),
  };
  Atom_Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Atom_Action_descriptor_,
      Atom_Action::default_instance_,
      Atom_Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Atom_Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Atom_Action));
  Atom_Action_ActionType_descriptor_ = Atom_Action_descriptor_->enum_type(0);
  Atom_DestinationType_descriptor_ = Atom_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_broker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_descriptor_, &Atom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Parameter_descriptor_, &Atom_Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Header_descriptor_, &Atom_Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_BrokerMessage_descriptor_, &Atom_BrokerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Publish_descriptor_, &Atom_Publish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Poll_descriptor_, &Atom_Poll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Accepted_descriptor_, &Atom_Accepted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_AcknowledgeMessage_descriptor_, &Atom_AcknowledgeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Subscribe_descriptor_, &Atom_Subscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Unsubscribe_descriptor_, &Atom_Unsubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Notification_descriptor_, &Atom_Notification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Fault_descriptor_, &Atom_Fault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Ping_descriptor_, &Atom_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Pong_descriptor_, &Atom_Pong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Authentication_descriptor_, &Atom_Authentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Atom_Action_descriptor_, &Atom_Action::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_broker_2eproto() {
  delete Atom::default_instance_;
  delete Atom_reflection_;
  delete Atom_Parameter::default_instance_;
  delete Atom_Parameter_reflection_;
  delete Atom_Header::default_instance_;
  delete Atom_Header_reflection_;
  delete Atom_BrokerMessage::default_instance_;
  delete Atom_BrokerMessage_reflection_;
  delete Atom_Publish::default_instance_;
  delete Atom_Publish_reflection_;
  delete Atom_Poll::default_instance_;
  delete Atom_Poll_reflection_;
  delete Atom_Accepted::default_instance_;
  delete Atom_Accepted_reflection_;
  delete Atom_AcknowledgeMessage::default_instance_;
  delete Atom_AcknowledgeMessage_reflection_;
  delete Atom_Subscribe::default_instance_;
  delete Atom_Subscribe_reflection_;
  delete Atom_Unsubscribe::default_instance_;
  delete Atom_Unsubscribe_reflection_;
  delete Atom_Notification::default_instance_;
  delete Atom_Notification_reflection_;
  delete Atom_Fault::default_instance_;
  delete Atom_Fault_reflection_;
  delete Atom_Ping::default_instance_;
  delete Atom_Ping_reflection_;
  delete Atom_Pong::default_instance_;
  delete Atom_Pong_reflection_;
  delete Atom_Authentication::default_instance_;
  delete Atom_Authentication_reflection_;
  delete Atom_Action::default_instance_;
  delete Atom_Action_reflection_;
}

void protobuf_AddDesc_broker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014broker.proto\022\013sapo_broker\"\246\020\n\004Atom\022(\n\006"
    "header\030\001 \001(\0132\030.sapo_broker.Atom.Header\022("
    "\n\006action\030\002 \002(\0132\030.sapo_broker.Atom.Action"
    "\032(\n\tParameter\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002"
    "(\t\0328\n\006Header\022.\n\tparameter\030\001 \003(\0132\033.sapo_b"
    "roker.Atom.Parameter\032[\n\rBrokerMessage\022\022\n"
    "\nmessage_id\030\001 \001(\t\022\017\n\007payload\030\002 \002(\014\022\022\n\nex"
    "piration\030\003 \001(\003\022\021\n\ttimestamp\030\004 \001(\003\032\240\001\n\007Pu"
    "blish\022\021\n\taction_id\030\001 \001(\t\022;\n\020destination_"
    "type\030\002 \002(\0162!.sapo_broker.Atom.Destinatio"
    "nType\022\023\n\013destination\030\003 \002(\t\0220\n\007message\030\004 "
    "\002(\0132\037.sapo_broker.Atom.BrokerMessage\032?\n\004"
    "Poll\022\021\n\taction_id\030\001 \001(\t\022\023\n\013destination\030\002"
    " \002(\t\022\017\n\007timeout\030\003 \002(\003\032\035\n\010Accepted\022\021\n\tact"
    "ion_id\030\001 \002(\t\032P\n\022AcknowledgeMessage\022\021\n\tac"
    "tion_id\030\001 \001(\t\022\022\n\nmessage_id\030\002 \002(\t\022\023\n\013des"
    "tination\030\003 \002(\t\032p\n\tSubscribe\022\021\n\taction_id"
    "\030\001 \001(\t\022\023\n\013destination\030\002 \002(\t\022;\n\020destinati"
    "on_type\030\003 \002(\0162!.sapo_broker.Atom.Destina"
    "tionType\032r\n\013Unsubscribe\022\021\n\taction_id\030\001 \001"
    "(\t\022\023\n\013destination\030\002 \002(\t\022;\n\020destination_t"
    "ype\030\003 \002(\0162!.sapo_broker.Atom.Destination"
    "Type\032\250\001\n\014Notification\022\023\n\013destination\030\001 \002"
    "(\t\022\024\n\014subscription\030\002 \002(\t\022;\n\020destination_"
    "type\030\003 \002(\0162!.sapo_broker.Atom.Destinatio"
    "nType\0220\n\007message\030\004 \002(\0132\037.sapo_broker.Ato"
    "m.BrokerMessage\032[\n\005Fault\022\021\n\taction_id\030\001 "
    "\001(\t\022\022\n\nfault_code\030\002 \002(\t\022\025\n\rfault_message"
    "\030\003 \002(\t\022\024\n\014fault_detail\030\004 \001(\t\032\031\n\004Ping\022\021\n\t"
    "action_id\030\001 \002(\t\032\031\n\004Pong\022\021\n\taction_id\030\001 \002"
    "(\t\032n\n\016Authentication\022\021\n\taction_id\030\001 \001(\t\022"
    "\033\n\023authentication_type\030\002 \001(\t\022\r\n\005token\030\003 "
    "\002(\014\022\017\n\007user_id\030\004 \001(\t\022\014\n\004role\030\005 \003(\t\032\343\005\n\006A"
    "ction\022*\n\007publish\030\001 \001(\0132\031.sapo_broker.Ato"
    "m.Publish\022$\n\004poll\030\002 \001(\0132\026.sapo_broker.At"
    "om.Poll\022,\n\010accepted\030\003 \001(\0132\032.sapo_broker."
    "Atom.Accepted\0229\n\013ack_message\030\004 \001(\0132$.sap"
    "o_broker.Atom.AcknowledgeMessage\022.\n\tsubs"
    "cribe\030\005 \001(\0132\033.sapo_broker.Atom.Subscribe"
    "\0222\n\013unsubscribe\030\006 \001(\0132\035.sapo_broker.Atom"
    ".Unsubscribe\0224\n\014notification\030\007 \001(\0132\036.sap"
    "o_broker.Atom.Notification\022&\n\005fault\030\010 \001("
    "\0132\027.sapo_broker.Atom.Fault\022$\n\004ping\030\t \001(\013"
    "2\026.sapo_broker.Atom.Ping\022$\n\004pong\030\n \001(\0132\026"
    ".sapo_broker.Atom.Pong\022.\n\004auth\030\013 \001(\0132 .s"
    "apo_broker.Atom.Authentication\0228\n\013action"
    "_type\030\014 \002(\0162#.sapo_broker.Atom.Action.Ac"
    "tionType\"\245\001\n\nActionType\022\013\n\007PUBLISH\020\000\022\010\n\004"
    "POLL\020\001\022\014\n\010ACCEPTED\020\002\022\027\n\023ACKNOWLEDGE_MESS"
    "AGE\020\003\022\r\n\tSUBSCRIBE\020\004\022\017\n\013UNSUBSCRIBE\020\005\022\020\n"
    "\014NOTIFICATION\020\006\022\t\n\005FAULT\020\007\022\010\n\004PING\020\010\022\010\n\004"
    "PONG\020\t\022\010\n\004AUTH\020\n\":\n\017DestinationType\022\t\n\005T"
    "OPIC\020\000\022\t\n\005QUEUE\020\001\022\021\n\rVIRTUAL_QUEUE\020\002B+\n\034"
    "pt.com.broker.codec.protobufB\tPBMessageH"
    "\001", 2161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "broker.proto", &protobuf_RegisterTypes);
  Atom::default_instance_ = new Atom();
  Atom_Parameter::default_instance_ = new Atom_Parameter();
  Atom_Header::default_instance_ = new Atom_Header();
  Atom_BrokerMessage::default_instance_ = new Atom_BrokerMessage();
  Atom_Publish::default_instance_ = new Atom_Publish();
  Atom_Poll::default_instance_ = new Atom_Poll();
  Atom_Accepted::default_instance_ = new Atom_Accepted();
  Atom_AcknowledgeMessage::default_instance_ = new Atom_AcknowledgeMessage();
  Atom_Subscribe::default_instance_ = new Atom_Subscribe();
  Atom_Unsubscribe::default_instance_ = new Atom_Unsubscribe();
  Atom_Notification::default_instance_ = new Atom_Notification();
  Atom_Fault::default_instance_ = new Atom_Fault();
  Atom_Ping::default_instance_ = new Atom_Ping();
  Atom_Pong::default_instance_ = new Atom_Pong();
  Atom_Authentication::default_instance_ = new Atom_Authentication();
  Atom_Action::default_instance_ = new Atom_Action();
  Atom::default_instance_->InitAsDefaultInstance();
  Atom_Parameter::default_instance_->InitAsDefaultInstance();
  Atom_Header::default_instance_->InitAsDefaultInstance();
  Atom_BrokerMessage::default_instance_->InitAsDefaultInstance();
  Atom_Publish::default_instance_->InitAsDefaultInstance();
  Atom_Poll::default_instance_->InitAsDefaultInstance();
  Atom_Accepted::default_instance_->InitAsDefaultInstance();
  Atom_AcknowledgeMessage::default_instance_->InitAsDefaultInstance();
  Atom_Subscribe::default_instance_->InitAsDefaultInstance();
  Atom_Unsubscribe::default_instance_->InitAsDefaultInstance();
  Atom_Notification::default_instance_->InitAsDefaultInstance();
  Atom_Fault::default_instance_->InitAsDefaultInstance();
  Atom_Ping::default_instance_->InitAsDefaultInstance();
  Atom_Pong::default_instance_->InitAsDefaultInstance();
  Atom_Authentication::default_instance_->InitAsDefaultInstance();
  Atom_Action::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_broker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_broker_2eproto {
  StaticDescriptorInitializer_broker_2eproto() {
    protobuf_AddDesc_broker_2eproto();
  }
} static_descriptor_initializer_broker_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Atom_DestinationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_DestinationType_descriptor_;
}
bool Atom_DestinationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Atom_DestinationType Atom::TOPIC;
const Atom_DestinationType Atom::QUEUE;
const Atom_DestinationType Atom::VIRTUAL_QUEUE;
const Atom_DestinationType Atom::DestinationType_MIN;
const Atom_DestinationType Atom::DestinationType_MAX;
const int Atom::DestinationType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Atom_Parameter::_default_name_;
const ::std::string Atom_Parameter::_default_value_;
#ifndef _MSC_VER
const int Atom_Parameter::kNameFieldNumber;
const int Atom_Parameter::kValueFieldNumber;
#endif  // !_MSC_VER

Atom_Parameter::Atom_Parameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Parameter::InitAsDefaultInstance() {
}

Atom_Parameter::Atom_Parameter(const Atom_Parameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Parameter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Parameter::~Atom_Parameter() {
  SharedDtor();
}

void Atom_Parameter::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Atom_Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Parameter_descriptor_;
}

const Atom_Parameter& Atom_Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Parameter* Atom_Parameter::default_instance_ = NULL;

Atom_Parameter* Atom_Parameter::New() const {
  return new Atom_Parameter;
}

void Atom_Parameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Parameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Parameter::MergeFrom(const Atom_Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Parameter::CopyFrom(const Atom_Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Atom_Parameter::Swap(Atom_Parameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Parameter_descriptor_;
  metadata.reflection = Atom_Parameter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Atom_Header::kParameterFieldNumber;
#endif  // !_MSC_VER

Atom_Header::Atom_Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Header::InitAsDefaultInstance() {
}

Atom_Header::Atom_Header(const Atom_Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Header::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Header::~Atom_Header() {
  SharedDtor();
}

void Atom_Header::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Atom_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Header_descriptor_;
}

const Atom_Header& Atom_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Header* Atom_Header::default_instance_ = NULL;

Atom_Header* Atom_Header::New() const {
  return new Atom_Header;
}

void Atom_Header::Clear() {
  parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sapo_broker.Atom.Parameter parameter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_parameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sapo_broker.Atom.Parameter parameter = 1;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parameter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sapo_broker.Atom.Parameter parameter = 1;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parameter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Header::ByteSize() const {
  int total_size = 0;
  
  // repeated .sapo_broker.Atom.Parameter parameter = 1;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Header::MergeFrom(const Atom_Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Header::CopyFrom(const Atom_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Header::IsInitialized() const {
  
  for (int i = 0; i < parameter_size(); i++) {
    if (!this->parameter(i).IsInitialized()) return false;
  }
  return true;
}

void Atom_Header::Swap(Atom_Header* other) {
  if (other != this) {
    parameter_.Swap(&other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Header_descriptor_;
  metadata.reflection = Atom_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_BrokerMessage::_default_message_id_;
const ::std::string Atom_BrokerMessage::_default_payload_;
#ifndef _MSC_VER
const int Atom_BrokerMessage::kMessageIdFieldNumber;
const int Atom_BrokerMessage::kPayloadFieldNumber;
const int Atom_BrokerMessage::kExpirationFieldNumber;
const int Atom_BrokerMessage::kTimestampFieldNumber;
#endif  // !_MSC_VER

Atom_BrokerMessage::Atom_BrokerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_BrokerMessage::InitAsDefaultInstance() {
}

Atom_BrokerMessage::Atom_BrokerMessage(const Atom_BrokerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_BrokerMessage::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = const_cast< ::std::string*>(&_default_message_id_);
  payload_ = const_cast< ::std::string*>(&_default_payload_);
  expiration_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_BrokerMessage::~Atom_BrokerMessage() {
  SharedDtor();
}

void Atom_BrokerMessage::SharedDtor() {
  if (message_id_ != &_default_message_id_) {
    delete message_id_;
  }
  if (payload_ != &_default_payload_) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void Atom_BrokerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_BrokerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_BrokerMessage_descriptor_;
}

const Atom_BrokerMessage& Atom_BrokerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_BrokerMessage* Atom_BrokerMessage::default_instance_ = NULL;

Atom_BrokerMessage* Atom_BrokerMessage::New() const {
  return new Atom_BrokerMessage;
}

void Atom_BrokerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (message_id_ != &_default_message_id_) {
        message_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (payload_ != &_default_payload_) {
        payload_->clear();
      }
    }
    expiration_ = GOOGLE_LONGLONG(0);
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_BrokerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_id().data(), this->message_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // required bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expiration;
        break;
      }
      
      // optional int64 expiration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }
      
      // optional int64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_BrokerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_id(), output);
  }
  
  // required bytes payload = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }
  
  // optional int64 expiration = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expiration(), output);
  }
  
  // optional int64 timestamp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_BrokerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_id(), target);
  }
  
  // required bytes payload = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }
  
  // optional int64 expiration = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expiration(), target);
  }
  
  // optional int64 timestamp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_BrokerMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_id());
    }
    
    // required bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
    // optional int64 expiration = 3;
    if (has_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiration());
    }
    
    // optional int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_BrokerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_BrokerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_BrokerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_BrokerMessage::MergeFrom(const Atom_BrokerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_message_id(from.message_id());
    }
    if (from._has_bit(1)) {
      set_payload(from.payload());
    }
    if (from._has_bit(2)) {
      set_expiration(from.expiration());
    }
    if (from._has_bit(3)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_BrokerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_BrokerMessage::CopyFrom(const Atom_BrokerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_BrokerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void Atom_BrokerMessage::Swap(Atom_BrokerMessage* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(payload_, other->payload_);
    std::swap(expiration_, other->expiration_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_BrokerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_BrokerMessage_descriptor_;
  metadata.reflection = Atom_BrokerMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Publish::_default_action_id_;
const ::std::string Atom_Publish::_default_destination_;
#ifndef _MSC_VER
const int Atom_Publish::kActionIdFieldNumber;
const int Atom_Publish::kDestinationTypeFieldNumber;
const int Atom_Publish::kDestinationFieldNumber;
const int Atom_Publish::kMessageFieldNumber;
#endif  // !_MSC_VER

Atom_Publish::Atom_Publish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Publish::InitAsDefaultInstance() {
  message_ = const_cast< ::sapo_broker::Atom_BrokerMessage*>(&::sapo_broker::Atom_BrokerMessage::default_instance());
}

Atom_Publish::Atom_Publish(const Atom_Publish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Publish::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  destination_type_ = 0;
  destination_ = const_cast< ::std::string*>(&_default_destination_);
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Publish::~Atom_Publish() {
  SharedDtor();
}

void Atom_Publish::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (destination_ != &_default_destination_) {
    delete destination_;
  }
  if (this != default_instance_) {
    delete message_;
  }
}

void Atom_Publish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Publish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Publish_descriptor_;
}

const Atom_Publish& Atom_Publish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Publish* Atom_Publish::default_instance_ = NULL;

Atom_Publish* Atom_Publish::New() const {
  return new Atom_Publish;
}

void Atom_Publish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
    destination_type_ = 0;
    if (_has_bit(2)) {
      if (destination_ != &_default_destination_) {
        destination_->clear();
      }
    }
    if (_has_bit(3)) {
      if (message_ != NULL) message_->::sapo_broker::Atom_BrokerMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Publish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destination_type;
        break;
      }
      
      // required .sapo_broker.Atom.DestinationType destination_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sapo_broker::Atom_DestinationType_IsValid(value)) {
            set_destination_type(static_cast< ::sapo_broker::Atom_DestinationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_destination;
        break;
      }
      
      // required string destination = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }
      
      // required .sapo_broker.Atom.BrokerMessage message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Publish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  // required .sapo_broker.Atom.DestinationType destination_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->destination_type(), output);
  }
  
  // required string destination = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->destination(), output);
  }
  
  // required .sapo_broker.Atom.BrokerMessage message = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Publish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  // required .sapo_broker.Atom.DestinationType destination_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->destination_type(), target);
  }
  
  // required string destination = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->destination(), target);
  }
  
  // required .sapo_broker.Atom.BrokerMessage message = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Publish::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
    // required .sapo_broker.Atom.DestinationType destination_type = 2;
    if (has_destination_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination_type());
    }
    
    // required string destination = 3;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }
    
    // required .sapo_broker.Atom.BrokerMessage message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Publish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Publish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Publish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Publish::MergeFrom(const Atom_Publish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
    if (from._has_bit(1)) {
      set_destination_type(from.destination_type());
    }
    if (from._has_bit(2)) {
      set_destination(from.destination());
    }
    if (from._has_bit(3)) {
      mutable_message()->::sapo_broker::Atom_BrokerMessage::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Publish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Publish::CopyFrom(const Atom_Publish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Publish::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void Atom_Publish::Swap(Atom_Publish* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(destination_type_, other->destination_type_);
    std::swap(destination_, other->destination_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Publish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Publish_descriptor_;
  metadata.reflection = Atom_Publish_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Poll::_default_action_id_;
const ::std::string Atom_Poll::_default_destination_;
#ifndef _MSC_VER
const int Atom_Poll::kActionIdFieldNumber;
const int Atom_Poll::kDestinationFieldNumber;
const int Atom_Poll::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Atom_Poll::Atom_Poll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Poll::InitAsDefaultInstance() {
}

Atom_Poll::Atom_Poll(const Atom_Poll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Poll::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  destination_ = const_cast< ::std::string*>(&_default_destination_);
  timeout_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Poll::~Atom_Poll() {
  SharedDtor();
}

void Atom_Poll::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (destination_ != &_default_destination_) {
    delete destination_;
  }
  if (this != default_instance_) {
  }
}

void Atom_Poll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Poll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Poll_descriptor_;
}

const Atom_Poll& Atom_Poll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Poll* Atom_Poll::default_instance_ = NULL;

Atom_Poll* Atom_Poll::New() const {
  return new Atom_Poll;
}

void Atom_Poll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (destination_ != &_default_destination_) {
        destination_->clear();
      }
    }
    timeout_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Poll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_destination;
        break;
      }
      
      // required string destination = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }
      
      // required int64 timeout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeout_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Poll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  // required string destination = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->destination(), output);
  }
  
  // required int64 timeout = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Poll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  // required string destination = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }
  
  // required int64 timeout = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Poll::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
    // required string destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }
    
    // required int64 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Poll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Poll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Poll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Poll::MergeFrom(const Atom_Poll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
    if (from._has_bit(1)) {
      set_destination(from.destination());
    }
    if (from._has_bit(2)) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Poll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Poll::CopyFrom(const Atom_Poll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Poll::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void Atom_Poll::Swap(Atom_Poll* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(destination_, other->destination_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Poll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Poll_descriptor_;
  metadata.reflection = Atom_Poll_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Accepted::_default_action_id_;
#ifndef _MSC_VER
const int Atom_Accepted::kActionIdFieldNumber;
#endif  // !_MSC_VER

Atom_Accepted::Atom_Accepted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Accepted::InitAsDefaultInstance() {
}

Atom_Accepted::Atom_Accepted(const Atom_Accepted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Accepted::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Accepted::~Atom_Accepted() {
  SharedDtor();
}

void Atom_Accepted::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (this != default_instance_) {
  }
}

void Atom_Accepted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Accepted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Accepted_descriptor_;
}

const Atom_Accepted& Atom_Accepted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Accepted* Atom_Accepted::default_instance_ = NULL;

Atom_Accepted* Atom_Accepted::New() const {
  return new Atom_Accepted;
}

void Atom_Accepted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Accepted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Accepted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Accepted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Accepted::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Accepted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Accepted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Accepted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Accepted::MergeFrom(const Atom_Accepted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Accepted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Accepted::CopyFrom(const Atom_Accepted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Accepted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Atom_Accepted::Swap(Atom_Accepted* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Accepted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Accepted_descriptor_;
  metadata.reflection = Atom_Accepted_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_AcknowledgeMessage::_default_action_id_;
const ::std::string Atom_AcknowledgeMessage::_default_message_id_;
const ::std::string Atom_AcknowledgeMessage::_default_destination_;
#ifndef _MSC_VER
const int Atom_AcknowledgeMessage::kActionIdFieldNumber;
const int Atom_AcknowledgeMessage::kMessageIdFieldNumber;
const int Atom_AcknowledgeMessage::kDestinationFieldNumber;
#endif  // !_MSC_VER

Atom_AcknowledgeMessage::Atom_AcknowledgeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_AcknowledgeMessage::InitAsDefaultInstance() {
}

Atom_AcknowledgeMessage::Atom_AcknowledgeMessage(const Atom_AcknowledgeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_AcknowledgeMessage::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  message_id_ = const_cast< ::std::string*>(&_default_message_id_);
  destination_ = const_cast< ::std::string*>(&_default_destination_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_AcknowledgeMessage::~Atom_AcknowledgeMessage() {
  SharedDtor();
}

void Atom_AcknowledgeMessage::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (message_id_ != &_default_message_id_) {
    delete message_id_;
  }
  if (destination_ != &_default_destination_) {
    delete destination_;
  }
  if (this != default_instance_) {
  }
}

void Atom_AcknowledgeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_AcknowledgeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_AcknowledgeMessage_descriptor_;
}

const Atom_AcknowledgeMessage& Atom_AcknowledgeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_AcknowledgeMessage* Atom_AcknowledgeMessage::default_instance_ = NULL;

Atom_AcknowledgeMessage* Atom_AcknowledgeMessage::New() const {
  return new Atom_AcknowledgeMessage;
}

void Atom_AcknowledgeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (message_id_ != &_default_message_id_) {
        message_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (destination_ != &_default_destination_) {
        destination_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_AcknowledgeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message_id;
        break;
      }
      
      // required string message_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_id().data(), this->message_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_destination;
        break;
      }
      
      // required string destination = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_AcknowledgeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  // required string message_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message_id(), output);
  }
  
  // required string destination = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->destination(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_AcknowledgeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  // required string message_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_id().data(), this->message_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_id(), target);
  }
  
  // required string destination = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->destination(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_AcknowledgeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
    // required string message_id = 2;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_id());
    }
    
    // required string destination = 3;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_AcknowledgeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_AcknowledgeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_AcknowledgeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_AcknowledgeMessage::MergeFrom(const Atom_AcknowledgeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
    if (from._has_bit(1)) {
      set_message_id(from.message_id());
    }
    if (from._has_bit(2)) {
      set_destination(from.destination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_AcknowledgeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_AcknowledgeMessage::CopyFrom(const Atom_AcknowledgeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_AcknowledgeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void Atom_AcknowledgeMessage::Swap(Atom_AcknowledgeMessage* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(message_id_, other->message_id_);
    std::swap(destination_, other->destination_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_AcknowledgeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_AcknowledgeMessage_descriptor_;
  metadata.reflection = Atom_AcknowledgeMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Subscribe::_default_action_id_;
const ::std::string Atom_Subscribe::_default_destination_;
#ifndef _MSC_VER
const int Atom_Subscribe::kActionIdFieldNumber;
const int Atom_Subscribe::kDestinationFieldNumber;
const int Atom_Subscribe::kDestinationTypeFieldNumber;
#endif  // !_MSC_VER

Atom_Subscribe::Atom_Subscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Subscribe::InitAsDefaultInstance() {
}

Atom_Subscribe::Atom_Subscribe(const Atom_Subscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Subscribe::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  destination_ = const_cast< ::std::string*>(&_default_destination_);
  destination_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Subscribe::~Atom_Subscribe() {
  SharedDtor();
}

void Atom_Subscribe::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (destination_ != &_default_destination_) {
    delete destination_;
  }
  if (this != default_instance_) {
  }
}

void Atom_Subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Subscribe_descriptor_;
}

const Atom_Subscribe& Atom_Subscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Subscribe* Atom_Subscribe::default_instance_ = NULL;

Atom_Subscribe* Atom_Subscribe::New() const {
  return new Atom_Subscribe;
}

void Atom_Subscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (destination_ != &_default_destination_) {
        destination_->clear();
      }
    }
    destination_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_destination;
        break;
      }
      
      // required string destination = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destination_type;
        break;
      }
      
      // required .sapo_broker.Atom.DestinationType destination_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sapo_broker::Atom_DestinationType_IsValid(value)) {
            set_destination_type(static_cast< ::sapo_broker::Atom_DestinationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  // required string destination = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->destination(), output);
  }
  
  // required .sapo_broker.Atom.DestinationType destination_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->destination_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Subscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  // required string destination = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }
  
  // required .sapo_broker.Atom.DestinationType destination_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->destination_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Subscribe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
    // required string destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }
    
    // required .sapo_broker.Atom.DestinationType destination_type = 3;
    if (has_destination_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Subscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Subscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Subscribe::MergeFrom(const Atom_Subscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
    if (from._has_bit(1)) {
      set_destination(from.destination());
    }
    if (from._has_bit(2)) {
      set_destination_type(from.destination_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Subscribe::CopyFrom(const Atom_Subscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Subscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void Atom_Subscribe::Swap(Atom_Subscribe* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(destination_, other->destination_);
    std::swap(destination_type_, other->destination_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Subscribe_descriptor_;
  metadata.reflection = Atom_Subscribe_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Unsubscribe::_default_action_id_;
const ::std::string Atom_Unsubscribe::_default_destination_;
#ifndef _MSC_VER
const int Atom_Unsubscribe::kActionIdFieldNumber;
const int Atom_Unsubscribe::kDestinationFieldNumber;
const int Atom_Unsubscribe::kDestinationTypeFieldNumber;
#endif  // !_MSC_VER

Atom_Unsubscribe::Atom_Unsubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Unsubscribe::InitAsDefaultInstance() {
}

Atom_Unsubscribe::Atom_Unsubscribe(const Atom_Unsubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Unsubscribe::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  destination_ = const_cast< ::std::string*>(&_default_destination_);
  destination_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Unsubscribe::~Atom_Unsubscribe() {
  SharedDtor();
}

void Atom_Unsubscribe::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (destination_ != &_default_destination_) {
    delete destination_;
  }
  if (this != default_instance_) {
  }
}

void Atom_Unsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Unsubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Unsubscribe_descriptor_;
}

const Atom_Unsubscribe& Atom_Unsubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Unsubscribe* Atom_Unsubscribe::default_instance_ = NULL;

Atom_Unsubscribe* Atom_Unsubscribe::New() const {
  return new Atom_Unsubscribe;
}

void Atom_Unsubscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (destination_ != &_default_destination_) {
        destination_->clear();
      }
    }
    destination_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Unsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_destination;
        break;
      }
      
      // required string destination = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destination_type;
        break;
      }
      
      // required .sapo_broker.Atom.DestinationType destination_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sapo_broker::Atom_DestinationType_IsValid(value)) {
            set_destination_type(static_cast< ::sapo_broker::Atom_DestinationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Unsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  // required string destination = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->destination(), output);
  }
  
  // required .sapo_broker.Atom.DestinationType destination_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->destination_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Unsubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  // required string destination = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }
  
  // required .sapo_broker.Atom.DestinationType destination_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->destination_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Unsubscribe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
    // required string destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }
    
    // required .sapo_broker.Atom.DestinationType destination_type = 3;
    if (has_destination_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Unsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Unsubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Unsubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Unsubscribe::MergeFrom(const Atom_Unsubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
    if (from._has_bit(1)) {
      set_destination(from.destination());
    }
    if (from._has_bit(2)) {
      set_destination_type(from.destination_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Unsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Unsubscribe::CopyFrom(const Atom_Unsubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Unsubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void Atom_Unsubscribe::Swap(Atom_Unsubscribe* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(destination_, other->destination_);
    std::swap(destination_type_, other->destination_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Unsubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Unsubscribe_descriptor_;
  metadata.reflection = Atom_Unsubscribe_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Notification::_default_destination_;
const ::std::string Atom_Notification::_default_subscription_;
#ifndef _MSC_VER
const int Atom_Notification::kDestinationFieldNumber;
const int Atom_Notification::kSubscriptionFieldNumber;
const int Atom_Notification::kDestinationTypeFieldNumber;
const int Atom_Notification::kMessageFieldNumber;
#endif  // !_MSC_VER

Atom_Notification::Atom_Notification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Notification::InitAsDefaultInstance() {
  message_ = const_cast< ::sapo_broker::Atom_BrokerMessage*>(&::sapo_broker::Atom_BrokerMessage::default_instance());
}

Atom_Notification::Atom_Notification(const Atom_Notification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Notification::SharedCtor() {
  _cached_size_ = 0;
  destination_ = const_cast< ::std::string*>(&_default_destination_);
  subscription_ = const_cast< ::std::string*>(&_default_subscription_);
  destination_type_ = 0;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Notification::~Atom_Notification() {
  SharedDtor();
}

void Atom_Notification::SharedDtor() {
  if (destination_ != &_default_destination_) {
    delete destination_;
  }
  if (subscription_ != &_default_subscription_) {
    delete subscription_;
  }
  if (this != default_instance_) {
    delete message_;
  }
}

void Atom_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Notification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Notification_descriptor_;
}

const Atom_Notification& Atom_Notification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Notification* Atom_Notification::default_instance_ = NULL;

Atom_Notification* Atom_Notification::New() const {
  return new Atom_Notification;
}

void Atom_Notification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (destination_ != &_default_destination_) {
        destination_->clear();
      }
    }
    if (_has_bit(1)) {
      if (subscription_ != &_default_subscription_) {
        subscription_->clear();
      }
    }
    destination_type_ = 0;
    if (_has_bit(3)) {
      if (message_ != NULL) message_->::sapo_broker::Atom_BrokerMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string destination = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscription;
        break;
      }
      
      // required string subscription = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subscription().data(), this->subscription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destination_type;
        break;
      }
      
      // required .sapo_broker.Atom.DestinationType destination_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sapo_broker::Atom_DestinationType_IsValid(value)) {
            set_destination_type(static_cast< ::sapo_broker::Atom_DestinationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }
      
      // required .sapo_broker.Atom.BrokerMessage message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string destination = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->destination(), output);
  }
  
  // required string subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subscription(), output);
  }
  
  // required .sapo_broker.Atom.DestinationType destination_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->destination_type(), output);
  }
  
  // required .sapo_broker.Atom.BrokerMessage message = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Notification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string destination = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination(), target);
  }
  
  // required string subscription = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subscription().data(), this->subscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subscription(), target);
  }
  
  // required .sapo_broker.Atom.DestinationType destination_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->destination_type(), target);
  }
  
  // required .sapo_broker.Atom.BrokerMessage message = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Notification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string destination = 1;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }
    
    // required string subscription = 2;
    if (has_subscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subscription());
    }
    
    // required .sapo_broker.Atom.DestinationType destination_type = 3;
    if (has_destination_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination_type());
    }
    
    // required .sapo_broker.Atom.BrokerMessage message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Notification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Notification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Notification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Notification::MergeFrom(const Atom_Notification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_destination(from.destination());
    }
    if (from._has_bit(1)) {
      set_subscription(from.subscription());
    }
    if (from._has_bit(2)) {
      set_destination_type(from.destination_type());
    }
    if (from._has_bit(3)) {
      mutable_message()->::sapo_broker::Atom_BrokerMessage::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Notification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Notification::CopyFrom(const Atom_Notification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Notification::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void Atom_Notification::Swap(Atom_Notification* other) {
  if (other != this) {
    std::swap(destination_, other->destination_);
    std::swap(subscription_, other->subscription_);
    std::swap(destination_type_, other->destination_type_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Notification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Notification_descriptor_;
  metadata.reflection = Atom_Notification_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Fault::_default_action_id_;
const ::std::string Atom_Fault::_default_fault_code_;
const ::std::string Atom_Fault::_default_fault_message_;
const ::std::string Atom_Fault::_default_fault_detail_;
#ifndef _MSC_VER
const int Atom_Fault::kActionIdFieldNumber;
const int Atom_Fault::kFaultCodeFieldNumber;
const int Atom_Fault::kFaultMessageFieldNumber;
const int Atom_Fault::kFaultDetailFieldNumber;
#endif  // !_MSC_VER

Atom_Fault::Atom_Fault()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Fault::InitAsDefaultInstance() {
}

Atom_Fault::Atom_Fault(const Atom_Fault& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Fault::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  fault_code_ = const_cast< ::std::string*>(&_default_fault_code_);
  fault_message_ = const_cast< ::std::string*>(&_default_fault_message_);
  fault_detail_ = const_cast< ::std::string*>(&_default_fault_detail_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Fault::~Atom_Fault() {
  SharedDtor();
}

void Atom_Fault::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (fault_code_ != &_default_fault_code_) {
    delete fault_code_;
  }
  if (fault_message_ != &_default_fault_message_) {
    delete fault_message_;
  }
  if (fault_detail_ != &_default_fault_detail_) {
    delete fault_detail_;
  }
  if (this != default_instance_) {
  }
}

void Atom_Fault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Fault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Fault_descriptor_;
}

const Atom_Fault& Atom_Fault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Fault* Atom_Fault::default_instance_ = NULL;

Atom_Fault* Atom_Fault::New() const {
  return new Atom_Fault;
}

void Atom_Fault::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (fault_code_ != &_default_fault_code_) {
        fault_code_->clear();
      }
    }
    if (_has_bit(2)) {
      if (fault_message_ != &_default_fault_message_) {
        fault_message_->clear();
      }
    }
    if (_has_bit(3)) {
      if (fault_detail_ != &_default_fault_detail_) {
        fault_detail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Fault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fault_code;
        break;
      }
      
      // required string fault_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fault_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fault_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fault_code().data(), this->fault_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fault_message;
        break;
      }
      
      // required string fault_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fault_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fault_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fault_message().data(), this->fault_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fault_detail;
        break;
      }
      
      // optional string fault_detail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fault_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fault_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fault_detail().data(), this->fault_detail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Fault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  // required string fault_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fault_code().data(), this->fault_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fault_code(), output);
  }
  
  // required string fault_message = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fault_message().data(), this->fault_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fault_message(), output);
  }
  
  // optional string fault_detail = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fault_detail().data(), this->fault_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fault_detail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Fault::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  // required string fault_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fault_code().data(), this->fault_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fault_code(), target);
  }
  
  // required string fault_message = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fault_message().data(), this->fault_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fault_message(), target);
  }
  
  // optional string fault_detail = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fault_detail().data(), this->fault_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fault_detail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Fault::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
    // required string fault_code = 2;
    if (has_fault_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fault_code());
    }
    
    // required string fault_message = 3;
    if (has_fault_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fault_message());
    }
    
    // optional string fault_detail = 4;
    if (has_fault_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fault_detail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Fault::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Fault* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Fault*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Fault::MergeFrom(const Atom_Fault& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
    if (from._has_bit(1)) {
      set_fault_code(from.fault_code());
    }
    if (from._has_bit(2)) {
      set_fault_message(from.fault_message());
    }
    if (from._has_bit(3)) {
      set_fault_detail(from.fault_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Fault::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Fault::CopyFrom(const Atom_Fault& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Fault::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void Atom_Fault::Swap(Atom_Fault* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(fault_code_, other->fault_code_);
    std::swap(fault_message_, other->fault_message_);
    std::swap(fault_detail_, other->fault_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Fault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Fault_descriptor_;
  metadata.reflection = Atom_Fault_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Ping::_default_action_id_;
#ifndef _MSC_VER
const int Atom_Ping::kActionIdFieldNumber;
#endif  // !_MSC_VER

Atom_Ping::Atom_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Ping::InitAsDefaultInstance() {
}

Atom_Ping::Atom_Ping(const Atom_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Ping::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Ping::~Atom_Ping() {
  SharedDtor();
}

void Atom_Ping::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (this != default_instance_) {
  }
}

void Atom_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Ping_descriptor_;
}

const Atom_Ping& Atom_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Ping* Atom_Ping::default_instance_ = NULL;

Atom_Ping* Atom_Ping::New() const {
  return new Atom_Ping;
}

void Atom_Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Ping::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Ping::MergeFrom(const Atom_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Ping::CopyFrom(const Atom_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Atom_Ping::Swap(Atom_Ping* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Ping_descriptor_;
  metadata.reflection = Atom_Ping_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Pong::_default_action_id_;
#ifndef _MSC_VER
const int Atom_Pong::kActionIdFieldNumber;
#endif  // !_MSC_VER

Atom_Pong::Atom_Pong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Pong::InitAsDefaultInstance() {
}

Atom_Pong::Atom_Pong(const Atom_Pong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Pong::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Pong::~Atom_Pong() {
  SharedDtor();
}

void Atom_Pong::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (this != default_instance_) {
  }
}

void Atom_Pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Pong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Pong_descriptor_;
}

const Atom_Pong& Atom_Pong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Pong* Atom_Pong::default_instance_ = NULL;

Atom_Pong* Atom_Pong::New() const {
  return new Atom_Pong;
}

void Atom_Pong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Pong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Pong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Pong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Pong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Pong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Pong::MergeFrom(const Atom_Pong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Pong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Pong::CopyFrom(const Atom_Pong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Pong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Atom_Pong::Swap(Atom_Pong* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Pong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Pong_descriptor_;
  metadata.reflection = Atom_Pong_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string Atom_Authentication::_default_action_id_;
const ::std::string Atom_Authentication::_default_authentication_type_;
const ::std::string Atom_Authentication::_default_token_;
const ::std::string Atom_Authentication::_default_user_id_;
#ifndef _MSC_VER
const int Atom_Authentication::kActionIdFieldNumber;
const int Atom_Authentication::kAuthenticationTypeFieldNumber;
const int Atom_Authentication::kTokenFieldNumber;
const int Atom_Authentication::kUserIdFieldNumber;
const int Atom_Authentication::kRoleFieldNumber;
#endif  // !_MSC_VER

Atom_Authentication::Atom_Authentication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Authentication::InitAsDefaultInstance() {
}

Atom_Authentication::Atom_Authentication(const Atom_Authentication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Authentication::SharedCtor() {
  _cached_size_ = 0;
  action_id_ = const_cast< ::std::string*>(&_default_action_id_);
  authentication_type_ = const_cast< ::std::string*>(&_default_authentication_type_);
  token_ = const_cast< ::std::string*>(&_default_token_);
  user_id_ = const_cast< ::std::string*>(&_default_user_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Authentication::~Atom_Authentication() {
  SharedDtor();
}

void Atom_Authentication::SharedDtor() {
  if (action_id_ != &_default_action_id_) {
    delete action_id_;
  }
  if (authentication_type_ != &_default_authentication_type_) {
    delete authentication_type_;
  }
  if (token_ != &_default_token_) {
    delete token_;
  }
  if (user_id_ != &_default_user_id_) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void Atom_Authentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Authentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Authentication_descriptor_;
}

const Atom_Authentication& Atom_Authentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Authentication* Atom_Authentication::default_instance_ = NULL;

Atom_Authentication* Atom_Authentication::New() const {
  return new Atom_Authentication;
}

void Atom_Authentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (action_id_ != &_default_action_id_) {
        action_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (authentication_type_ != &_default_authentication_type_) {
        authentication_type_->clear();
      }
    }
    if (_has_bit(2)) {
      if (token_ != &_default_token_) {
        token_->clear();
      }
    }
    if (_has_bit(3)) {
      if (user_id_ != &_default_user_id_) {
        user_id_->clear();
      }
    }
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Authentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string action_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authentication_type;
        break;
      }
      
      // optional string authentication_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authentication_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authentication_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authentication_type().data(), this->authentication_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }
      
      // required bytes token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }
      
      // optional string user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role;
        break;
      }
      
      // repeated string role = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role(0).data(), this->role(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Authentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->action_id(), output);
  }
  
  // optional string authentication_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authentication_type().data(), this->authentication_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authentication_type(), output);
  }
  
  // required bytes token = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->token(), output);
  }
  
  // optional string user_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_id(), output);
  }
  
  // repeated string role = 5;
  for (int i = 0; i < this->role_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->role(i).data(), this->role(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->role(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Authentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string action_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action_id(), target);
  }
  
  // optional string authentication_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authentication_type().data(), this->authentication_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authentication_type(), target);
  }
  
  // required bytes token = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->token(), target);
  }
  
  // optional string user_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }
  
  // repeated string role = 5;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role(i).data(), this->role(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->role(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Authentication::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_id());
    }
    
    // optional string authentication_type = 2;
    if (has_authentication_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authentication_type());
    }
    
    // required bytes token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }
    
    // optional string user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
  }
  // repeated string role = 5;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->role(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Authentication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Authentication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Authentication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Authentication::MergeFrom(const Atom_Authentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action_id(from.action_id());
    }
    if (from._has_bit(1)) {
      set_authentication_type(from.authentication_type());
    }
    if (from._has_bit(2)) {
      set_token(from.token());
    }
    if (from._has_bit(3)) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Authentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Authentication::CopyFrom(const Atom_Authentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Authentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void Atom_Authentication::Swap(Atom_Authentication* other) {
  if (other != this) {
    std::swap(action_id_, other->action_id_);
    std::swap(authentication_type_, other->authentication_type_);
    std::swap(token_, other->token_);
    std::swap(user_id_, other->user_id_);
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Authentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Authentication_descriptor_;
  metadata.reflection = Atom_Authentication_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Atom_Action_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Action_ActionType_descriptor_;
}
bool Atom_Action_ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Atom_Action_ActionType Atom_Action::PUBLISH;
const Atom_Action_ActionType Atom_Action::POLL;
const Atom_Action_ActionType Atom_Action::ACCEPTED;
const Atom_Action_ActionType Atom_Action::ACKNOWLEDGE_MESSAGE;
const Atom_Action_ActionType Atom_Action::SUBSCRIBE;
const Atom_Action_ActionType Atom_Action::UNSUBSCRIBE;
const Atom_Action_ActionType Atom_Action::NOTIFICATION;
const Atom_Action_ActionType Atom_Action::FAULT;
const Atom_Action_ActionType Atom_Action::PING;
const Atom_Action_ActionType Atom_Action::PONG;
const Atom_Action_ActionType Atom_Action::AUTH;
const Atom_Action_ActionType Atom_Action::ActionType_MIN;
const Atom_Action_ActionType Atom_Action::ActionType_MAX;
const int Atom_Action::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Atom_Action::kPublishFieldNumber;
const int Atom_Action::kPollFieldNumber;
const int Atom_Action::kAcceptedFieldNumber;
const int Atom_Action::kAckMessageFieldNumber;
const int Atom_Action::kSubscribeFieldNumber;
const int Atom_Action::kUnsubscribeFieldNumber;
const int Atom_Action::kNotificationFieldNumber;
const int Atom_Action::kFaultFieldNumber;
const int Atom_Action::kPingFieldNumber;
const int Atom_Action::kPongFieldNumber;
const int Atom_Action::kAuthFieldNumber;
const int Atom_Action::kActionTypeFieldNumber;
#endif  // !_MSC_VER

Atom_Action::Atom_Action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom_Action::InitAsDefaultInstance() {
  publish_ = const_cast< ::sapo_broker::Atom_Publish*>(&::sapo_broker::Atom_Publish::default_instance());
  poll_ = const_cast< ::sapo_broker::Atom_Poll*>(&::sapo_broker::Atom_Poll::default_instance());
  accepted_ = const_cast< ::sapo_broker::Atom_Accepted*>(&::sapo_broker::Atom_Accepted::default_instance());
  ack_message_ = const_cast< ::sapo_broker::Atom_AcknowledgeMessage*>(&::sapo_broker::Atom_AcknowledgeMessage::default_instance());
  subscribe_ = const_cast< ::sapo_broker::Atom_Subscribe*>(&::sapo_broker::Atom_Subscribe::default_instance());
  unsubscribe_ = const_cast< ::sapo_broker::Atom_Unsubscribe*>(&::sapo_broker::Atom_Unsubscribe::default_instance());
  notification_ = const_cast< ::sapo_broker::Atom_Notification*>(&::sapo_broker::Atom_Notification::default_instance());
  fault_ = const_cast< ::sapo_broker::Atom_Fault*>(&::sapo_broker::Atom_Fault::default_instance());
  ping_ = const_cast< ::sapo_broker::Atom_Ping*>(&::sapo_broker::Atom_Ping::default_instance());
  pong_ = const_cast< ::sapo_broker::Atom_Pong*>(&::sapo_broker::Atom_Pong::default_instance());
  auth_ = const_cast< ::sapo_broker::Atom_Authentication*>(&::sapo_broker::Atom_Authentication::default_instance());
}

Atom_Action::Atom_Action(const Atom_Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom_Action::SharedCtor() {
  _cached_size_ = 0;
  publish_ = NULL;
  poll_ = NULL;
  accepted_ = NULL;
  ack_message_ = NULL;
  subscribe_ = NULL;
  unsubscribe_ = NULL;
  notification_ = NULL;
  fault_ = NULL;
  ping_ = NULL;
  pong_ = NULL;
  auth_ = NULL;
  action_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom_Action::~Atom_Action() {
  SharedDtor();
}

void Atom_Action::SharedDtor() {
  if (this != default_instance_) {
    delete publish_;
    delete poll_;
    delete accepted_;
    delete ack_message_;
    delete subscribe_;
    delete unsubscribe_;
    delete notification_;
    delete fault_;
    delete ping_;
    delete pong_;
    delete auth_;
  }
}

void Atom_Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom_Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_Action_descriptor_;
}

const Atom_Action& Atom_Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom_Action* Atom_Action::default_instance_ = NULL;

Atom_Action* Atom_Action::New() const {
  return new Atom_Action;
}

void Atom_Action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (publish_ != NULL) publish_->::sapo_broker::Atom_Publish::Clear();
    }
    if (_has_bit(1)) {
      if (poll_ != NULL) poll_->::sapo_broker::Atom_Poll::Clear();
    }
    if (_has_bit(2)) {
      if (accepted_ != NULL) accepted_->::sapo_broker::Atom_Accepted::Clear();
    }
    if (_has_bit(3)) {
      if (ack_message_ != NULL) ack_message_->::sapo_broker::Atom_AcknowledgeMessage::Clear();
    }
    if (_has_bit(4)) {
      if (subscribe_ != NULL) subscribe_->::sapo_broker::Atom_Subscribe::Clear();
    }
    if (_has_bit(5)) {
      if (unsubscribe_ != NULL) unsubscribe_->::sapo_broker::Atom_Unsubscribe::Clear();
    }
    if (_has_bit(6)) {
      if (notification_ != NULL) notification_->::sapo_broker::Atom_Notification::Clear();
    }
    if (_has_bit(7)) {
      if (fault_ != NULL) fault_->::sapo_broker::Atom_Fault::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (ping_ != NULL) ping_->::sapo_broker::Atom_Ping::Clear();
    }
    if (_has_bit(9)) {
      if (pong_ != NULL) pong_->::sapo_broker::Atom_Pong::Clear();
    }
    if (_has_bit(10)) {
      if (auth_ != NULL) auth_->::sapo_broker::Atom_Authentication::Clear();
    }
    action_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom_Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sapo_broker.Atom.Publish publish = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publish()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_poll;
        break;
      }
      
      // optional .sapo_broker.Atom.Poll poll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accepted;
        break;
      }
      
      // optional .sapo_broker.Atom.Accepted accepted = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accepted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accepted()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ack_message;
        break;
      }
      
      // optional .sapo_broker.Atom.AcknowledgeMessage ack_message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subscribe;
        break;
      }
      
      // optional .sapo_broker.Atom.Subscribe subscribe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_unsubscribe;
        break;
      }
      
      // optional .sapo_broker.Atom.Unsubscribe unsubscribe = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unsubscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unsubscribe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notification;
        break;
      }
      
      // optional .sapo_broker.Atom.Notification notification = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fault;
        break;
      }
      
      // optional .sapo_broker.Atom.Fault fault = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fault:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fault()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ping;
        break;
      }
      
      // optional .sapo_broker.Atom.Ping ping = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pong;
        break;
      }
      
      // optional .sapo_broker.Atom.Pong pong = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_auth;
        break;
      }
      
      // optional .sapo_broker.Atom.Authentication auth = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_action_type;
        break;
      }
      
      // required .sapo_broker.Atom.Action.ActionType action_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sapo_broker::Atom_Action_ActionType_IsValid(value)) {
            set_action_type(static_cast< ::sapo_broker::Atom_Action_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom_Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sapo_broker.Atom.Publish publish = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->publish(), output);
  }
  
  // optional .sapo_broker.Atom.Poll poll = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->poll(), output);
  }
  
  // optional .sapo_broker.Atom.Accepted accepted = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accepted(), output);
  }
  
  // optional .sapo_broker.Atom.AcknowledgeMessage ack_message = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ack_message(), output);
  }
  
  // optional .sapo_broker.Atom.Subscribe subscribe = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subscribe(), output);
  }
  
  // optional .sapo_broker.Atom.Unsubscribe unsubscribe = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->unsubscribe(), output);
  }
  
  // optional .sapo_broker.Atom.Notification notification = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->notification(), output);
  }
  
  // optional .sapo_broker.Atom.Fault fault = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fault(), output);
  }
  
  // optional .sapo_broker.Atom.Ping ping = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ping(), output);
  }
  
  // optional .sapo_broker.Atom.Pong pong = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pong(), output);
  }
  
  // optional .sapo_broker.Atom.Authentication auth = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->auth(), output);
  }
  
  // required .sapo_broker.Atom.Action.ActionType action_type = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->action_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom_Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .sapo_broker.Atom.Publish publish = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->publish(), target);
  }
  
  // optional .sapo_broker.Atom.Poll poll = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->poll(), target);
  }
  
  // optional .sapo_broker.Atom.Accepted accepted = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accepted(), target);
  }
  
  // optional .sapo_broker.Atom.AcknowledgeMessage ack_message = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ack_message(), target);
  }
  
  // optional .sapo_broker.Atom.Subscribe subscribe = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subscribe(), target);
  }
  
  // optional .sapo_broker.Atom.Unsubscribe unsubscribe = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->unsubscribe(), target);
  }
  
  // optional .sapo_broker.Atom.Notification notification = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->notification(), target);
  }
  
  // optional .sapo_broker.Atom.Fault fault = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fault(), target);
  }
  
  // optional .sapo_broker.Atom.Ping ping = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ping(), target);
  }
  
  // optional .sapo_broker.Atom.Pong pong = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pong(), target);
  }
  
  // optional .sapo_broker.Atom.Authentication auth = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->auth(), target);
  }
  
  // required .sapo_broker.Atom.Action.ActionType action_type = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->action_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom_Action::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sapo_broker.Atom.Publish publish = 1;
    if (has_publish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publish());
    }
    
    // optional .sapo_broker.Atom.Poll poll = 2;
    if (has_poll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poll());
    }
    
    // optional .sapo_broker.Atom.Accepted accepted = 3;
    if (has_accepted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accepted());
    }
    
    // optional .sapo_broker.Atom.AcknowledgeMessage ack_message = 4;
    if (has_ack_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack_message());
    }
    
    // optional .sapo_broker.Atom.Subscribe subscribe = 5;
    if (has_subscribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe());
    }
    
    // optional .sapo_broker.Atom.Unsubscribe unsubscribe = 6;
    if (has_unsubscribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unsubscribe());
    }
    
    // optional .sapo_broker.Atom.Notification notification = 7;
    if (has_notification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notification());
    }
    
    // optional .sapo_broker.Atom.Fault fault = 8;
    if (has_fault()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fault());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .sapo_broker.Atom.Ping ping = 9;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
    }
    
    // optional .sapo_broker.Atom.Pong pong = 10;
    if (has_pong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pong());
    }
    
    // optional .sapo_broker.Atom.Authentication auth = 11;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth());
    }
    
    // required .sapo_broker.Atom.Action.ActionType action_type = 12;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom_Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom_Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom_Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom_Action::MergeFrom(const Atom_Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_publish()->::sapo_broker::Atom_Publish::MergeFrom(from.publish());
    }
    if (from._has_bit(1)) {
      mutable_poll()->::sapo_broker::Atom_Poll::MergeFrom(from.poll());
    }
    if (from._has_bit(2)) {
      mutable_accepted()->::sapo_broker::Atom_Accepted::MergeFrom(from.accepted());
    }
    if (from._has_bit(3)) {
      mutable_ack_message()->::sapo_broker::Atom_AcknowledgeMessage::MergeFrom(from.ack_message());
    }
    if (from._has_bit(4)) {
      mutable_subscribe()->::sapo_broker::Atom_Subscribe::MergeFrom(from.subscribe());
    }
    if (from._has_bit(5)) {
      mutable_unsubscribe()->::sapo_broker::Atom_Unsubscribe::MergeFrom(from.unsubscribe());
    }
    if (from._has_bit(6)) {
      mutable_notification()->::sapo_broker::Atom_Notification::MergeFrom(from.notification());
    }
    if (from._has_bit(7)) {
      mutable_fault()->::sapo_broker::Atom_Fault::MergeFrom(from.fault());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_ping()->::sapo_broker::Atom_Ping::MergeFrom(from.ping());
    }
    if (from._has_bit(9)) {
      mutable_pong()->::sapo_broker::Atom_Pong::MergeFrom(from.pong());
    }
    if (from._has_bit(10)) {
      mutable_auth()->::sapo_broker::Atom_Authentication::MergeFrom(from.auth());
    }
    if (from._has_bit(11)) {
      set_action_type(from.action_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom_Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom_Action::CopyFrom(const Atom_Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom_Action::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000800) != 0x00000800) return false;
  
  if (has_publish()) {
    if (!this->publish().IsInitialized()) return false;
  }
  if (has_poll()) {
    if (!this->poll().IsInitialized()) return false;
  }
  if (has_accepted()) {
    if (!this->accepted().IsInitialized()) return false;
  }
  if (has_ack_message()) {
    if (!this->ack_message().IsInitialized()) return false;
  }
  if (has_subscribe()) {
    if (!this->subscribe().IsInitialized()) return false;
  }
  if (has_unsubscribe()) {
    if (!this->unsubscribe().IsInitialized()) return false;
  }
  if (has_notification()) {
    if (!this->notification().IsInitialized()) return false;
  }
  if (has_fault()) {
    if (!this->fault().IsInitialized()) return false;
  }
  if (has_ping()) {
    if (!this->ping().IsInitialized()) return false;
  }
  if (has_pong()) {
    if (!this->pong().IsInitialized()) return false;
  }
  if (has_auth()) {
    if (!this->auth().IsInitialized()) return false;
  }
  return true;
}

void Atom_Action::Swap(Atom_Action* other) {
  if (other != this) {
    std::swap(publish_, other->publish_);
    std::swap(poll_, other->poll_);
    std::swap(accepted_, other->accepted_);
    std::swap(ack_message_, other->ack_message_);
    std::swap(subscribe_, other->subscribe_);
    std::swap(unsubscribe_, other->unsubscribe_);
    std::swap(notification_, other->notification_);
    std::swap(fault_, other->fault_);
    std::swap(ping_, other->ping_);
    std::swap(pong_, other->pong_);
    std::swap(auth_, other->auth_);
    std::swap(action_type_, other->action_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom_Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_Action_descriptor_;
  metadata.reflection = Atom_Action_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Atom::kHeaderFieldNumber;
const int Atom::kActionFieldNumber;
#endif  // !_MSC_VER

Atom::Atom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Atom::InitAsDefaultInstance() {
  header_ = const_cast< ::sapo_broker::Atom_Header*>(&::sapo_broker::Atom_Header::default_instance());
  action_ = const_cast< ::sapo_broker::Atom_Action*>(&::sapo_broker::Atom_Action::default_instance());
}

Atom::Atom(const Atom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Atom::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Atom::~Atom() {
  SharedDtor();
}

void Atom::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete action_;
  }
}

void Atom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Atom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Atom_descriptor_;
}

const Atom& Atom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_broker_2eproto();  return *default_instance_;
}

Atom* Atom::default_instance_ = NULL;

Atom* Atom::New() const {
  return new Atom;
}

void Atom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (header_ != NULL) header_->::sapo_broker::Atom_Header::Clear();
    }
    if (_has_bit(1)) {
      if (action_ != NULL) action_->::sapo_broker::Atom_Action::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Atom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sapo_broker.Atom.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_action;
        break;
      }
      
      // required .sapo_broker.Atom.Action action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Atom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sapo_broker.Atom.Header header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required .sapo_broker.Atom.Action action = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Atom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .sapo_broker.Atom.Header header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required .sapo_broker.Atom.Action action = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Atom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sapo_broker.Atom.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required .sapo_broker.Atom.Action action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Atom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Atom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Atom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Atom::MergeFrom(const Atom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_header()->::sapo_broker::Atom_Header::MergeFrom(from.header());
    }
    if (from._has_bit(1)) {
      mutable_action()->::sapo_broker::Atom_Action::MergeFrom(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Atom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Atom::CopyFrom(const Atom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Atom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_action()) {
    if (!this->action().IsInitialized()) return false;
  }
  return true;
}

void Atom::Swap(Atom* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Atom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Atom_descriptor_;
  metadata.reflection = Atom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sapo_broker

// @@protoc_insertion_point(global_scope)
