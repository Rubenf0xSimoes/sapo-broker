/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package pt.com.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;

import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.*;

public class ServerChallenge implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ServerChallenge");
  private static final TField COMMUNICATION_ID_FIELD_DESC = new TField("communication_id", TType.STRING, (short)1);
  private static final TField CHALLENGE_FIELD_DESC = new TField("challenge", TType.STRING, (short)2);
  private static final TField SECRET_FIELD_DESC = new TField("secret", TType.STRING, (short)3);
  private static final TField LOCAL_COMMUNICATION_ID_FIELD_DESC = new TField("local_communication_id", TType.STRING, (short)4);
  private static final TField SECRET_TYPE_FIELD_DESC = new TField("secret_type", TType.STRING, (short)5);

  public String communication_id;
  public static final int COMMUNICATION_ID = 1;
  public byte[] challenge;
  public static final int CHALLENGE = 2;
  public byte[] secret;
  public static final int SECRET = 3;
  public String local_communication_id;
  public static final int LOCAL_COMMUNICATION_ID = 4;
  public String secret_type;
  public static final int SECRET_TYPE = 5;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(COMMUNICATION_ID, new FieldMetaData("communication_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(CHALLENGE, new FieldMetaData("challenge", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(SECRET, new FieldMetaData("secret", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(LOCAL_COMMUNICATION_ID, new FieldMetaData("local_communication_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(SECRET_TYPE, new FieldMetaData("secret_type", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ServerChallenge.class, metaDataMap);
  }

  public ServerChallenge() {
  }

  public ServerChallenge(
    String communication_id,
    byte[] challenge,
    byte[] secret,
    String local_communication_id,
    String secret_type)
  {
    this();
    this.communication_id = communication_id;
    this.challenge = challenge;
    this.secret = secret;
    this.local_communication_id = local_communication_id;
    this.secret_type = secret_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServerChallenge(ServerChallenge other) {
    if (other.isSetCommunication_id()) {
      this.communication_id = other.communication_id;
    }
    if (other.isSetChallenge()) {
      this.challenge = new byte[other.challenge.length];
      System.arraycopy(other.challenge, 0, challenge, 0, other.challenge.length);
    }
    if (other.isSetSecret()) {
      this.secret = new byte[other.secret.length];
      System.arraycopy(other.secret, 0, secret, 0, other.secret.length);
    }
    if (other.isSetLocal_communication_id()) {
      this.local_communication_id = other.local_communication_id;
    }
    if (other.isSetSecret_type()) {
      this.secret_type = other.secret_type;
    }
  }

  @Override
  public ServerChallenge clone() {
    return new ServerChallenge(this);
  }

  public String getCommunication_id() {
    return this.communication_id;
  }

  public void setCommunication_id(String communication_id) {
    this.communication_id = communication_id;
  }

  public void unsetCommunication_id() {
    this.communication_id = null;
  }

  // Returns true if field communication_id is set (has been asigned a value) and false otherwise
  public boolean isSetCommunication_id() {
    return this.communication_id != null;
  }

  public void setCommunication_idIsSet(boolean value) {
    if (!value) {
      this.communication_id = null;
    }
  }

  public byte[] getChallenge() {
    return this.challenge;
  }

  public void setChallenge(byte[] challenge) {
    this.challenge = challenge;
  }

  public void unsetChallenge() {
    this.challenge = null;
  }

  // Returns true if field challenge is set (has been asigned a value) and false otherwise
  public boolean isSetChallenge() {
    return this.challenge != null;
  }

  public void setChallengeIsSet(boolean value) {
    if (!value) {
      this.challenge = null;
    }
  }

  public byte[] getSecret() {
    return this.secret;
  }

  public void setSecret(byte[] secret) {
    this.secret = secret;
  }

  public void unsetSecret() {
    this.secret = null;
  }

  // Returns true if field secret is set (has been asigned a value) and false otherwise
  public boolean isSetSecret() {
    return this.secret != null;
  }

  public void setSecretIsSet(boolean value) {
    if (!value) {
      this.secret = null;
    }
  }

  public String getLocal_communication_id() {
    return this.local_communication_id;
  }

  public void setLocal_communication_id(String local_communication_id) {
    this.local_communication_id = local_communication_id;
  }

  public void unsetLocal_communication_id() {
    this.local_communication_id = null;
  }

  // Returns true if field local_communication_id is set (has been asigned a value) and false otherwise
  public boolean isSetLocal_communication_id() {
    return this.local_communication_id != null;
  }

  public void setLocal_communication_idIsSet(boolean value) {
    if (!value) {
      this.local_communication_id = null;
    }
  }

  public String getSecret_type() {
    return this.secret_type;
  }

  public void setSecret_type(String secret_type) {
    this.secret_type = secret_type;
  }

  public void unsetSecret_type() {
    this.secret_type = null;
  }

  // Returns true if field secret_type is set (has been asigned a value) and false otherwise
  public boolean isSetSecret_type() {
    return this.secret_type != null;
  }

  public void setSecret_typeIsSet(boolean value) {
    if (!value) {
      this.secret_type = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case COMMUNICATION_ID:
      setCommunication_id((String)value);
      break;

    case CHALLENGE:
      setChallenge((byte[])value);
      break;

    case SECRET:
      setSecret((byte[])value);
      break;

    case LOCAL_COMMUNICATION_ID:
      setLocal_communication_id((String)value);
      break;

    case SECRET_TYPE:
      setSecret_type((String)value);
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COMMUNICATION_ID:
      return getCommunication_id();

    case CHALLENGE:
      return getChallenge();

    case SECRET:
      return getSecret();

    case LOCAL_COMMUNICATION_ID:
      return getLocal_communication_id();

    case SECRET_TYPE:
      return getSecret_type();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case COMMUNICATION_ID:
      return isSetCommunication_id();
    case CHALLENGE:
      return isSetChallenge();
    case SECRET:
      return isSetSecret();
    case LOCAL_COMMUNICATION_ID:
      return isSetLocal_communication_id();
    case SECRET_TYPE:
      return isSetSecret_type();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServerChallenge)
      return this.equals((ServerChallenge)that);
    return false;
  }

  public boolean equals(ServerChallenge that) {
    if (that == null)
      return false;

    boolean this_present_communication_id = true && this.isSetCommunication_id();
    boolean that_present_communication_id = true && that.isSetCommunication_id();
    if (this_present_communication_id || that_present_communication_id) {
      if (!(this_present_communication_id && that_present_communication_id))
        return false;
      if (!this.communication_id.equals(that.communication_id))
        return false;
    }

    boolean this_present_challenge = true && this.isSetChallenge();
    boolean that_present_challenge = true && that.isSetChallenge();
    if (this_present_challenge || that_present_challenge) {
      if (!(this_present_challenge && that_present_challenge))
        return false;
      if (!java.util.Arrays.equals(this.challenge, that.challenge))
        return false;
    }

    boolean this_present_secret = true && this.isSetSecret();
    boolean that_present_secret = true && that.isSetSecret();
    if (this_present_secret || that_present_secret) {
      if (!(this_present_secret && that_present_secret))
        return false;
      if (!java.util.Arrays.equals(this.secret, that.secret))
        return false;
    }

    boolean this_present_local_communication_id = true && this.isSetLocal_communication_id();
    boolean that_present_local_communication_id = true && that.isSetLocal_communication_id();
    if (this_present_local_communication_id || that_present_local_communication_id) {
      if (!(this_present_local_communication_id && that_present_local_communication_id))
        return false;
      if (!this.local_communication_id.equals(that.local_communication_id))
        return false;
    }

    boolean this_present_secret_type = true && this.isSetSecret_type();
    boolean that_present_secret_type = true && that.isSetSecret_type();
    if (this_present_secret_type || that_present_secret_type) {
      if (!(this_present_secret_type && that_present_secret_type))
        return false;
      if (!this.secret_type.equals(that.secret_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case COMMUNICATION_ID:
          if (field.type == TType.STRING) {
            this.communication_id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHALLENGE:
          if (field.type == TType.STRING) {
            this.challenge = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SECRET:
          if (field.type == TType.STRING) {
            this.secret = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOCAL_COMMUNICATION_ID:
          if (field.type == TType.STRING) {
            this.local_communication_id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SECRET_TYPE:
          if (field.type == TType.STRING) {
            this.secret_type = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.communication_id != null) {
      oprot.writeFieldBegin(COMMUNICATION_ID_FIELD_DESC);
      oprot.writeString(this.communication_id);
      oprot.writeFieldEnd();
    }
    if (this.challenge != null) {
      oprot.writeFieldBegin(CHALLENGE_FIELD_DESC);
      oprot.writeBinary(this.challenge);
      oprot.writeFieldEnd();
    }
    if (this.secret != null) {
      oprot.writeFieldBegin(SECRET_FIELD_DESC);
      oprot.writeBinary(this.secret);
      oprot.writeFieldEnd();
    }
    if (this.local_communication_id != null) {
      oprot.writeFieldBegin(LOCAL_COMMUNICATION_ID_FIELD_DESC);
      oprot.writeString(this.local_communication_id);
      oprot.writeFieldEnd();
    }
    if (this.secret_type != null) {
      oprot.writeFieldBegin(SECRET_TYPE_FIELD_DESC);
      oprot.writeString(this.secret_type);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServerChallenge(");
    boolean first = true;

    sb.append("communication_id:");
    if (this.communication_id == null) {
      sb.append("null");
    } else {
      sb.append(this.communication_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("challenge:");
    if (this.challenge == null) {
      sb.append("null");
    } else {
        int __challenge_size = Math.min(this.challenge.length, 128);
        for (int i = 0; i < __challenge_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.challenge[i]).length() > 1 ? Integer.toHexString(this.challenge[i]).substring(Integer.toHexString(this.challenge[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.challenge[i]).toUpperCase());
        }
        if (this.challenge.length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secret:");
    if (this.secret == null) {
      sb.append("null");
    } else {
        int __secret_size = Math.min(this.secret.length, 128);
        for (int i = 0; i < __secret_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.secret[i]).length() > 1 ? Integer.toHexString(this.secret[i]).substring(Integer.toHexString(this.secret[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.secret[i]).toUpperCase());
        }
        if (this.secret.length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("local_communication_id:");
    if (this.local_communication_id == null) {
      sb.append("null");
    } else {
      sb.append(this.local_communication_id);
    }
    first = false;
    if (isSetSecret_type()) {
      if (!first) sb.append(", ");
      sb.append("secret_type:");
      if (this.secret_type == null) {
        sb.append("null");
      } else {
        sb.append(this.secret_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

