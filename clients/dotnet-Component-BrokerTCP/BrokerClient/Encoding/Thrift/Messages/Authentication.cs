/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace SapoBrokerClient.Encoding.Thrift.Messages
{

  [Serializable]
  public partial class Authentication : TBase
  {
    private string action_id;
    private string authentication_type;
    private byte[] token;
    private string user_id;
    private List<string> roles;

    public string Action_id
    {
      get
      {
        return action_id;
      }
      set
      {
        __isset.action_id = true;
        this.action_id = value;
      }
    }

    public string Authentication_type
    {
      get
      {
        return authentication_type;
      }
      set
      {
        __isset.authentication_type = true;
        this.authentication_type = value;
      }
    }

    public byte[] Token
    {
      get
      {
        return token;
      }
      set
      {
        __isset.token = true;
        this.token = value;
      }
    }

    public string User_id
    {
      get
      {
        return user_id;
      }
      set
      {
        __isset.user_id = true;
        this.user_id = value;
      }
    }

    public List<string> Roles
    {
      get
      {
        return roles;
      }
      set
      {
        __isset.roles = true;
        this.roles = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool action_id;
      public bool authentication_type;
      public bool token;
      public bool user_id;
      public bool roles;
    }

    public Authentication() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.action_id = iprot.ReadString();
              this.__isset.action_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.authentication_type = iprot.ReadString();
              this.__isset.authentication_type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              this.token = iprot.ReadBinary();
              this.__isset.token = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              this.user_id = iprot.ReadString();
              this.__isset.user_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                this.roles = new List<string>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  string _elem7 = null;
                  _elem7 = iprot.ReadString();
                  this.roles.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
              this.__isset.roles = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Authentication");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.action_id != null && __isset.action_id) {
        field.Name = "action_id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.action_id);
        oprot.WriteFieldEnd();
      }
      if (this.authentication_type != null && __isset.authentication_type) {
        field.Name = "authentication_type";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.authentication_type);
        oprot.WriteFieldEnd();
      }
      if (this.token != null && __isset.token) {
        field.Name = "token";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.token);
        oprot.WriteFieldEnd();
      }
      if (this.user_id != null && __isset.user_id) {
        field.Name = "user_id";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.user_id);
        oprot.WriteFieldEnd();
      }
      if (this.roles != null && __isset.roles) {
        field.Name = "roles";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.roles.Count));
          foreach (string _iter8 in this.roles)
          {
            oprot.WriteString(_iter8);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Authentication(");
      sb.Append("action_id: ");
      sb.Append(this.action_id);
      sb.Append(",authentication_type: ");
      sb.Append(this.authentication_type);
      sb.Append(",token: ");
      sb.Append(this.token);
      sb.Append(",user_id: ");
      sb.Append(this.user_id);
      sb.Append(",roles: ");
      sb.Append(this.roles);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
