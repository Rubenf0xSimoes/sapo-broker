<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<chapter id="tutorial">
  <title>User Guide</title>

  <section>
    <title>Getting started</title>
    <section>
      <title>Requirements</title>
      <para>In order to start using the Sapo-Broker you just need to have an installation of Java SDK 1.6 or higher and the "java" command in your PATH. You can quickly check for java version by opening a shell and typing:</para>
      <command>
        <prompt>java -version</prompt>
      </command>
    </section>
    <section>
      <title>Installation procedure</title>
      <para>The installation process is very easy. These are the required steps:</para>
      <itemizedlist>
        <listitem>Download the latest Sapo-Broker release from <ulink url="http://softwarelivre.sapo.pt/projects/broker/wiki/Download">http://softwarelivre.sapo.pt/projects/broker/wiki/</ulink></listitem>
        <listitem>Extract the archive or run the installer</listitem>
        <listitem>Run the samples</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Running the samples</title>
      <para>From a shell type:</para>
      <command>
        <prompt>./broker.sh</prompt>
      </command>
      <para>At this moment you should have an instance of the Sapo-Broker up and running. There is nothing stopping you from using a single instance of Sapo-Broker, but since one of it's main goals is to be used in a distributed fashion you really want to have at least two instances to play with, read the <ulink url="http://softwarelivre.sapo.pt/projects/broker/wiki/UserGuide">User Guide</ulink> to know how to setup and connect multiple instances.</para>
      <para>The distribution includes a couple of sample scripts that illustrate a common use case for Sapo-Broker, event propagation, among others. These scripts include a producer that sends messages with 100 random alpha numeric characters at the rate of one per second and a consumer that prints the message content to the console every time it receives a message.</para>
      <para>To run the producer open a shell and type:</para>
      <command>
        <prompt>./sample_producer.sh</prompt>
      </command>
      <para>To run the consumer:</para>
      <command>
        <prompt>./sample_consumer.sh</prompt>
      </command>
      <para>Besides the Linux scripts, there are also available windows batch files counterparts.</para>
    </section>
  </section>
  <section>
    <title>Client libraries</title>
    <para>Given the environment where Sapo-Broker was developed, somewhere where several projects are interconnected, written in many different programming languages it was absolutely crucial to support several broker client libraries written in various programming languages.</para>
    <para>For now, not all take advantaged of the features implemented in Sapo-Broker 3, but are still compatible through the use of a legacy port.</para>
    <para>The supported programming languages or platforms are: Java, .NET, Perl, Python, PHP, Ruby, C and Erlang. These libraries may be in different states of maturity.</para>
    <section>
      <title>Client compatibility matrix</title>
      <para>To help the choice of library and enlighten about what features are supported by witch libraries a client compatibility matrix is presented.</para>
      <table frame="all" id="clientcompmatrix">
        <title>Client library compatibility matrix</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1"/>
          <colspec colnum="2" colname="c2"/>
          <colspec colnum="3" colname="c3"/>
          <tbody>
            <row>
              <entry/>
              <entry>Java</entry>
              <entry>.NET</entry>
              <entry>Perl</entry>
              <entry>Python</entry>
              <entry>PHP</entry>
              <entry>Ruby</entry>
              <entry>C</entry>
              <entry>Erlang</entry>
              <entry>Javascript</entry>
            </row>
            <row>
              <entry>SOAP encoding</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">-</entry>
            </row>
            <row>
              <entry>ProtoBuf encoding (binary)</entry>
              <entry align="center">x</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">-</entry>
            </row>
            <row>
              <entry>Thrift encoding (binary)</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">-</entry>
            </row>
            <row>
              <entry>SSL support</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">-</entry>
            </row>
            <row>
              <entry>Client authentication</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">-</entry>
            </row>
            <row>
              <entry>Client authentication with Sapo STS</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">-</entry>
            </row>
            <row>
              <entry>Client failover</entry>
              <entry align="center">x</entry>
              <entry align="center">x</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">o</entry>
              <entry align="center">-</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Specific information about each client and their features, as well some samples, should be available. Poke <ulink url="http://softwarelivre.sapo.pt/projects/broker/browser/trunk/clients">around</ulink>.</para>
      <para>There are actually two .NET client libraries. One of which, although obsolete, supports XML encoding but not Sapo-Broker 3 specific features.</para>
    </section>
    <section>
      <title>Client usage samples in different languages</title>
      <para>In this section examples of publishing and consuming messages are going to be presented for several languages, namely <link linkend="CODESAMPLE_JAVA">Java</link>, <link linkend="CODESAMPLE_NET">C# (.NET)</link>, <link linkend="CODESAMPLE_PYTHON">Python</link>, <link linkend="CODESAMPLE_PERL">Perl</link>, <link linkend="CODESAMPLE_PHP">PHP</link>.</para>
      <section id ="CODESAMPLE_JAVA">
        <title>Java samples</title>
          <example>
            <title>Java publishing sample</title>
            <screen>
BrokerClient bk = new BrokerClient("127.0.0.1", 3323);
String msg = RandomStringUtils.randomAlphanumeric(messageLength);
NetBrokerMessage brokerMessage = new NetBrokerMessage("Hello World!!".getBytes("UTF-8"));
bk.publishMessage(brokerMessage, "/topic/foo");</screen>
          </example>
          <example>
            <title>Java consuming sample</title>
            <screen>
public class Consumer implements BrokerListener
{
	public static void main(String[] args) throws Throwable
	{
		Consumer consumer = new Consumer();
		BrokerClient bk = new BrokerClient("localhost", 3323);
		NetSubscribe subscribe = new NetSubscribe("/topic/foo", DestinationType.TOPIC);
		bk.addAsyncConsumer(subscribe, consumer);
	}

	@Override
	public boolean isAutoAck()
	{
		return false;
	}

	@Override
	public void onMessage(NetNotification notification)
	{
		System.out.println(String.format("%s -> Message destination: %s Received Message Length: %s (%s)", counter.incrementAndGet(),
				notification.getDestination(), 
				notification.getMessage().getPayload().length, new String(notification.getMessage().getPayload())));
	}
}</screen>
          </example>
       </section>
       <section id ="CODESAMPLE_NET">
        <title>C#/.NET samples</title>
          <example>
            <title>C#/.NET publishing sample</title>
            <screen>
BrokerClient brokerClient = new BrokerClient(new HostInfo("localhost", 3323));
NetBrokerMessage brokerMessage = new NetBrokerMessage(System.Text.Encoding.UTF8.GetBytes("Hello World!!"));
brokerClient.Publish(brokerMessage, "/topic/foo");</screen>
          </example>
          <example>
            <title>C#/.NET consuming sample</title>
            <screen>
BrokerClient brokerClient = new BrokerClient(HostInfo("localhost", 3323));
Subscription subscription = new Subscription("/topic/foo", NetAction.DestinationType.TOPIC);
subscription.OnMessage += delegate(NetNotification notification)
{
	System.Console.WriteLine("Message received: {0}", System.Text.Encoding.UTF8.GetString(notification.Message.Payload));
};
brokerClient.Subscribe(subscription);</screen>
          </example>
       </section>
       <section id ="CODESAMPLE_PYTHON">
        <title>Python samples</title>
          <example>
            <title>Python publishing sample</title>
            <screen>
import Broker

from time import sleep, time

destination = '/python/tests2'
kind = 'QUEUE'

#broker logging everything
import logging
logging.basicConfig(level=logging.INFO)
#logging.getLogger("Broker").setLevel(logging.DEBUG)

from random import random

broker = Broker.Client('localhost', 2222)

msg = Broker.Message(payload='Hello World!!', destination=destination)

for id in xrange(1000):
    msg.id = "%d, message_id = %d" % (time(), id)
    broker.produce(msg, kind)</screen>
          </example>
          <example>
            <title>Python consuming sample</title>
            <screen>
import logging
#logging.basicConfig(level=logging.INFO)
#broker logging everything
#logging.getLogger("Broker").setLevel(logging.DEBUG)

from time import time

import Broker

destination = '/python/tests2'
kind = 'QUEUE'

broker = Broker.Client('localhost', 3322)
broker.subscribe(destination, kind)

def consume(n):
    for id in xrange(1000):
        msg = broker.consume()

while True:
    n = 1000
    t = time()
    consume(n)
    d = time()-t
    print "consumed %f msg/s" % (n/d)</screen>
          </example>
       </section>
       <section id ="CODESAMPLE_PERL">
        <title>Perl samples</title>
          <example>
            <title>Perl publishing and consuming sample</title>
            <screen>
<![CDATA[
#!/usr/bin/perl 

use lib qw(lib);
use warnings;
use strict;
use SAPO::Broker;
use Data::Dumper;
use English qw( -no_match_vars );
use Time::HiRes qw(time);

my $topic = '/sapo/broker/machomac'; 

my $sleep = 1;

#---

$OUTPUT_AUTOFLUSH++;  # $|++;

&usage unless @ARGV;
my $stype = $ARGV[0] eq 'p' ? undef : 1;

my $events;
my $time = time;
$SIG{ALRM} = sub {
	my $diff_time = time-$time;
	my $events_per_sec = $events && $diff_time>0 ? sprintf("%02.2f",$events/$diff_time) : 0;
	print "Events per second: $events_per_sec\n";
	$events=0;
	$time=time;
	alarm 5;
};

alarm 5;


my $broker = SAPO::Broker->new(
	timeout		=> 60, 
	hosts       => [
	    { host    =>  '127.0.0.1' },
	    { host    =>  'devbroker' }
	],
	DEBUG		=> 0,
	retstruct   => 1,
);

die "No Broker?\n" unless $broker;


if ($stype) { # CONSUMER
	print "Starting as CONSUMER\n";
	die "Can't subscribe\n"  unless $broker->subscribe(
		topic => $topic,
	);
	while (1) {
		#print Dumper($broker->receive), "\n";		
		my $event = $broker->receive;
		print "Received: ",Dumper($event), "\n";
		
		# send the acknowledge when you subscribed the topic as queue
		if ($broker->msg_type($topic) eq 'TOPIC_AS_QUEUE') {
			$broker->ack($event);
		}
		
		$events++;
		#sleep $sleep;
	}
}
else { # PRODUCER
	print "Starting as PRODUCER\n";
	while (1) {
	    my $data = time;
	    #print "Sending: $data\n";
		warn "Can't Publish\n" unless $broker->publish(
			topic   => $topic,
			payload => $data,
		);
		$events++;
		#sleep $sleep;
	}
}

sub usage {
  print <<"USAGE";
$0 [p|c]
  p = producer
  c = consumer
USAGE

exit;
}
]]></screen>
          </example>
       </section>
       <section id ="CODESAMPLE_PHP">
        <title>PHP samples</title>
          <example>
            <title>PHP publishing sample</title>
            <screen>
<![CDATA[
#!/usr/bin/php -q
<?php
include('../classes/broker.php');
set_time_limit(0);
error_reporting(1);

#$broker=new SAPO_Broker(array('debug'=>TRUE));
$broker=new SAPO_Broker; // will use localhost

// this will be publish on the disks's dropbox because it's localhost
$r=$broker->publish('<xml>'.$broker->xmlentities('<<<ESCAPE-ME>>>').'</xml>',array('topic'=>'/sapo/developer/tests'));
if($r==FALSE) echo "Publish exited (last err: ".$broker->net->last_err.")\n";

echo "Done\n";
?>
]]></screen>
          </example>
          <example>
            <title>PHP consuming sample</title>
            <screen>
<![CDATA[
#!/usr/bin/php -q
<?php
include('../classes/broker.php');
set_time_limit(0);
error_reporting(1);

#$broker=new SAPO_Broker(array('debug'=>TRUE));
$broker=new SAPO_Broker;

// consumer example
echo "Subscribing topics\n";
$broker->subscribe('/sapo/tags/feeds/urls',NULL,"processUrls");
$broker->subscribe('/sapo/pesquisa/queries',NULL,"processSearch");
$broker->subscribe('/sapo/web/homepage/>',NULL,array("Test_Class","processTests"));
echo "Entering consumer() loop now\n";
$broker->consumer();

echo "Consumer exited (last err: ".$broker->net->last_err.")\n";

function processUrls($payload) {
  echo "processUrls() just got ".$payload."\n";
  }

function processSearch($payload) {
  echo "processSearch() just got ".$payload."\n";
  }

class Test_Class {

  function processTests($payload) {
    echo "processTests() just got ".$payload."\n";
    }

  }

?>
]]></screen>
          </example>
       </section>
    </section>
  </section>
  <section>
    <title>System topics</title>
    <para>Sapo-Broker agents publish several information regarding their internal state and events. This information is published to /system/[information type] topics.</para>
    <para>In order to guarantee that only agents produce messages to these topics an access control entry should be defined in the default <link linkend="ACCESS_CONTROL">security policy</link>.</para>
    <section>
      <title>Statistics</title>
      <para>Agents publish statistics regathering the number of consumers subscribed in each topic and queue.</para>
      <section>
        <title>Topic consumers</title>
        <para>Topic consumers are published in topic:</para>
        <code>/system/stats/topic-consumer-count/#[topic subscription]#</code>
        <para>The content of the published message, encoded using UTF-8, is:</para>
        <computeroutput>[agent name]#[subscription]#[number of subscriptions]</computeroutput>
      </section>
      <section>
        <title>Queue consumers</title>
        <para>Queue consumers are published in topic:</para>
        <code>/system/stats/queue-consumer-count/#[queue name]#</code>
        <para>The content of the published message, encoded using UTF-8, is:</para>
        <computeroutput>[agent name]#[queue name]#[number of subscriptions]</computeroutput>
      </section>
      <section>
        <title>Queue Size</title>
        <para>The number of messages by queue are published in topic:</para>
        <code>/system/stats/queue-size/#[queue name]#</code>
        <para>The content of the published message, encoded using UTF-8, is:</para>
        <computeroutput>[agent name]#[queue name]#[number of messages]</computeroutput>
      </section>
      <section>
        <title>Dropbox messages</title>
        <para>The number of messages by the dropbox are published in topic:</para>
        <code>/system/stats/dropbox/#[agent name]#</code>
        <para>The content of the published message, encoded using UTF-8, is:</para>
        <computeroutput>[agent name]#[dropbox location]#[number of messages]#[number of good messages]</computeroutput>
      </section>
    </section>
    <section>
      <title>Faults</title>
      <para>When an unhanded exception occurs, and it's not I/O related, agents publish an fault error. The message content conforms to SOAP Fault message format.</para>
      <para>Fault messages are published to topic:</para>
      <para>
        <computeroutput>/system/faults/[agent name]</computeroutput>
      </para>
      <para>A fault message can also be published when the maximum number of allowed queues or distinct topic subscriptions is reached . Here is a sample message content for each fault type:</para>
      <para>
        <computeroutput>The maximum number of queues (500) has been reached.</computeroutput> 
      </para>
      <para>
        <computeroutput>The maximum number of distinct subscriptions (500) has been reached.</computeroutput> 
      </para>
    </section>
  </section>

  <section>
    <title>Configuration</title>
    <para>Sapo-Broker configuration has a two level scope, meaning that some configuration aspects are related to Broker agents and others are global, and, as such, are applicable to all agents in the same cloud.</para>
      <section>
      <title>Global configuration</title>
      <para>There are three main configuration sections in global configuration file: Domain, Messages and Access Control. The later is divided in two parts and is discussed in <link linkend="ACCESS_CONTROL">Access control</link> section.</para>
      <para>Domain contains the agents composing the broker cloud ,that is, all the interconnected agents through witch client communication occurs. For each agent is defined a name and communication parameters  (IP and TCP port).</para>
      <para>The configuration aspects regarding messages are defined in Messages section. There is possible to define the maximum message size, the maximum number of queues, and topic distinct subscriptions, as well the time each queue message kept without consumers. Once that time ends, the message is deleted.</para>
    </section>
    <section>
      <title>Agents configuration</title>
      <para>Agent specific configuration contains all information specific to each agent, as its name open TCP ports, such inter-agent communication port, client TCP, UDP and HTTP port as well as a legacy port through witch clients not supporting the new wire messaging protocol can still communicate. This parameters are defined in "net" section as well as the location of the global configuration file.</para>
      <para>The directory where the queue messages are persisted is specified in "persistency" section. Dropbox functionality is configured in "messaging" section where the watch out directory, check interval, and whether the this feature is enabled or not are defined (Note: for now, this feature is disabled).</para>
      <para>Another optional section exists witch is related to SSL support. This is discussed in <link linkend="SSL_CONFIGURATION">SSL Configuration</link>.</para>
    </section>
  </section>
  <section>
    <title>Use cases</title>
    <para>In this section we provide some hints on how to design a messaging solution based on Sapo-Broker.</para>
    <section id="TOPICS_QUEUES_USE_CASE">
      <title>Topics, queues and virtual queues</title>
      <para>In order to make the choice of what message pattern to use easier and clarify the previous discussed destination type options a sample is provided.</para>
      <para>Image a company, BigCompany Inc., that uses Sapo-Broker as their messaging middleware. This company has several applications, many of witch produce information, such as "new client" engaged, "new sale" processed, "new product" added to products catalog. When these <emphasis>events</emphasis> occur they should be made available to other applications. Given that they are events and not work items they should be published to a topic. Applications interested in this information subscribe to the topic, but if the published information is so important and constitutes a work item to some of the subscribing applications, them they subscribe to the topic in persistent fashion, using a virtual queue (also known as a durable subscription).</para>
      <para>As an example, lets consider that a CRM application publishes a message to the topic /customer/new every time the company has a new customer. This information could be relevant to an application implementing an informal statistic on client's average age (if some client is missed, it's not a problem) so this application subscribe to the topic, however, for an application designed to initialize a workflow conducting to send the new client a welcome present as a limited time promotion, this information is crucial so it creates a Virtual Queue (or durable subscription), such as promotions@/customer/new. Other applications could register other virtual queues (e.g., foo@/customer/.*). <xref linkend="Figure-VIRTUALQUEUE" /> illustrates this scenario.</para>
      <para>Now consider that the promotions application, after some business logic, decides what gift should be send. The gift delivery is responsibility of the stock management application so the promotions application publishes a message to the queue /client-gift including client and gift information. This work dependency was established as a consequence of a business process definition so both applications know the name of the queue, message format and semantics.To guarantee that only the promotions application could publish messages to that queue and only the stock management application could retrieve messages from the queue a security policy could be defined.</para>
     <figure id="Figure-VIRTUALQUEUE">
      <title>An example with topic and virtual queue subscription</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/virtualqueuessample.jpeg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Given the ability that every application has to consume messages published to topic /customer/.* the format and the semantics of each message should be published to a known repository, such as a topic and queue web catalog. Note however that subscriptions and publications may be restricted using <link linkend="ACCESS_CONTROL">access control</link>.</para>
    </section>
    <section id="DISTRIBUTED_WORKLOAD_USE_CASE">
      <title>Distributed workload</title>
      <para>A classical example of workload distribution is based in queues. This can be done in-memory, in case of local process coordination, or using a messaging system in case of applications are running on different machines.</para>
      <para>The way to implement this using Sapo-Broker is very simple. Just determine the queue name and let information producers deliver messages to that queue and consumers subscribe to the queue. Messages will be delivered in a round-robin fashion to each subscriber.</para>
      <para>If there is a substantial difference between of work required to process each message type (e.g., type messages A are processed in 100 milliseconds, but type B messages are processed in 1 minute) each consumer may use synchronous <link linkend="POLL_MESSAGE">poll</link> to retrieve a message, doing it only when it's available to process messages.</para>
    </section>
    <section id="CACHE_INVALIDATION_USE_CASE">
      <title>Cache invalidation</title>
      <para>Coming soon...</para>
    </section>
  </section>
</chapter>

