package sapo_broker;

option java_package = "pt.com.protobuf.codec";
option java_outer_classname = "PBMessage";
option optimize_for = SPEED;


message Atom
{	
	enum DestinationType
	{
		TOPIC = 0;
		QUEUE = 1;
		VIRTUAL_QUEUE = 2;		
	}
	
	message Parameter
	{
		required string name = 1;
		required string value = 2;		
	}
	
	message Header
	{
		repeated Parameter parameter = 1;
	}

	message BrokerMessage
	{		
		optional string message_id = 1;
		required bytes payload = 2;		
		optional int64 expiration = 3;
		optional int64 timestamp = 4;
	}
	
	message Publish
	{
		optional string action_id = 1;
		required DestinationType destination_type = 2;
		required string destination = 3;
		required BrokerMessage message = 4;
	}
	
	message Poll
	{
		optional string action_id = 1;
		required string destination = 2;
	}	
	
	message Accepted
	{
		required string action_id = 1;
	}
	
	message AcknowledgeMessage
	{
		optional string action_id = 1;
		required string message_id = 2;
		required string destination = 3;
	}
	
	message Subscribe
	{
		optional string action_id = 1;
		required string destination = 2;
		required DestinationType destination_type = 3;
	}
	
	message Unsubscribe
	{
		optional string action_id = 1;
		required string destination = 2;
		required DestinationType destination_type = 3;
	}


	

	message Notification
	{
		required string destination = 1;
		required string subscription = 2;
		required DestinationType destination_type = 3;
		required BrokerMessage message = 4;
	}
	
	message Fault
	{
		optional string action_id = 1;
		required string fault_code = 2;
		required string fault_message = 3;
		optional string fault_detail = 4;
	}
	
	message Ping
	{
		required int64 timestamp = 1;
	}
	
	message Pong
	{
		required int64 timestamp = 1;
	}

	message Authentication
	{
		message ClientAuth
		{
			optional string authentication_type = 1;
			required string local_communication_id = 2;
			required bytes token = 3;
			optional string user_id = 4;
			repeated string role = 5; 			
		}
		message ServerChallenge
		{
			required string communication_id = 1;			
			required bytes challenge = 2;
			required bytes secret = 3;
			required string local_communication_id = 4;		
			optional string secret_type = 5;
		}		
		message ServerChallengeResponseClientChallenge
		{
			required string communication_id = 1;			
			required bytes protected_challenges = 2;
		}		
		message ClientChallengeResponse
		{
			required string communication_id = 1;
			required bytes challenge = 2;
		}		
		message ClientAcknowledge
		{
			required string communication_id = 1;
		}


		enum AuthMessageType {
			CLIENT_AUTH = 0;
			SERVER_CHALLENGE = 1;
			SERVER_CHALLENGE_RESPONSE_CLIENT_CHALLENGE = 2;
			CLIENT_CHALLENGE_RESPONSE = 3;
			CLIENT_ACKNOWLEDGE = 4;
		}

		required AuthMessageType authMsgType = 1;

		optional ClientAuth client_auth = 2;
		optional ServerChallenge server_challenge = 3;
		optional ServerChallengeResponseClientChallenge  server_challenge_response_client_challenge = 4;
		optional ClientChallengeResponse client_challenge_response = 5;
		optional ClientAcknowledge client_acknowledge = 6;
	}
	
	 	
	message Action
	{
		enum ActionType
		{
			PUBLISH = 0;
			POLL = 1;
			ACCEPTED = 2;
			ACKNOWLEDGE_MESSAGE = 3;
			SUBSCRIBE = 4;
			UNSUBSCRIBE = 5;
			NOTIFICATION = 6;
			FAULT = 7;
			PING = 8;
			PONG = 9;
			AUTH = 10;
		}
				
		optional Publish publish = 1;
		optional Poll poll = 2;
		optional Accepted accepted = 3;
		optional AcknowledgeMessage ack_message = 4;
		optional Subscribe subscribe = 5;
		optional Unsubscribe unsubscribe = 6;
		optional Notification notification = 7;
		optional Fault fault = 8;
		optional Ping ping = 9;
		optional Pong pong = 10;
		optional Authentication auth = 11;		
		required ActionType action_type = 12;
	}
	

	optional Header header = 1;
	required Action action = 2;

}
