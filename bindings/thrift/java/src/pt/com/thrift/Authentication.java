/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package pt.com.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;

import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.*;

public class Authentication implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Authentication");
  private static final TField AUTH_MSG_TYPE_FIELD_DESC = new TField("auth_msg_type", TType.I32, (short)1);
  private static final TField CLIENT_AUTH_FIELD_DESC = new TField("client_auth", TType.STRUCT, (short)2);
  private static final TField SERVER_CHALLENGE_FIELD_DESC = new TField("server_challenge", TType.STRUCT, (short)3);
  private static final TField SERVER_CHALLENGE_RESPONSE_CLIENT_CHALLENGE_FIELD_DESC = new TField("serverChallengeResponseClientChallenge", TType.STRUCT, (short)4);
  private static final TField CLIENT_CHALLENGE_RESPONSE_FIELD_DESC = new TField("clientChallengeResponse", TType.STRUCT, (short)5);
  private static final TField CLIENT_ACKNOWLEDGE_FIELD_DESC = new TField("client_acknowledge", TType.STRUCT, (short)6);

  public int auth_msg_type;
  public static final int AUTH_MSG_TYPE = 1;
  public ClientAuth client_auth;
  public static final int CLIENT_AUTH = 2;
  public ServerChallenge server_challenge;
  public static final int SERVER_CHALLENGE = 3;
  public ServerChallengeResponseClientChallenge serverChallengeResponseClientChallenge;
  public static final int SERVERCHALLENGERESPONSECLIENTCHALLENGE = 4;
  public ClientChallengeResponse clientChallengeResponse;
  public static final int CLIENTCHALLENGERESPONSE = 5;
  public ClientAcknowledge client_acknowledge;
  public static final int CLIENT_ACKNOWLEDGE = 6;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean auth_msg_type = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(AUTH_MSG_TYPE, new FieldMetaData("auth_msg_type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(CLIENT_AUTH, new FieldMetaData("client_auth", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ClientAuth.class)));
    put(SERVER_CHALLENGE, new FieldMetaData("server_challenge", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ServerChallenge.class)));
    put(SERVERCHALLENGERESPONSECLIENTCHALLENGE, new FieldMetaData("serverChallengeResponseClientChallenge", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ServerChallengeResponseClientChallenge.class)));
    put(CLIENTCHALLENGERESPONSE, new FieldMetaData("clientChallengeResponse", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ClientChallengeResponse.class)));
    put(CLIENT_ACKNOWLEDGE, new FieldMetaData("client_acknowledge", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, ClientAcknowledge.class)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Authentication.class, metaDataMap);
  }

  public Authentication() {
  }

  public Authentication(
    int auth_msg_type,
    ClientAuth client_auth,
    ServerChallenge server_challenge,
    ServerChallengeResponseClientChallenge serverChallengeResponseClientChallenge,
    ClientChallengeResponse clientChallengeResponse,
    ClientAcknowledge client_acknowledge)
  {
    this();
    this.auth_msg_type = auth_msg_type;
    this.__isset.auth_msg_type = true;
    this.client_auth = client_auth;
    this.server_challenge = server_challenge;
    this.serverChallengeResponseClientChallenge = serverChallengeResponseClientChallenge;
    this.clientChallengeResponse = clientChallengeResponse;
    this.client_acknowledge = client_acknowledge;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Authentication(Authentication other) {
    __isset.auth_msg_type = other.__isset.auth_msg_type;
    this.auth_msg_type = other.auth_msg_type;
    if (other.isSetClient_auth()) {
      this.client_auth = new ClientAuth(other.client_auth);
    }
    if (other.isSetServer_challenge()) {
      this.server_challenge = new ServerChallenge(other.server_challenge);
    }
    if (other.isSetServerChallengeResponseClientChallenge()) {
      this.serverChallengeResponseClientChallenge = new ServerChallengeResponseClientChallenge(other.serverChallengeResponseClientChallenge);
    }
    if (other.isSetClientChallengeResponse()) {
      this.clientChallengeResponse = new ClientChallengeResponse(other.clientChallengeResponse);
    }
    if (other.isSetClient_acknowledge()) {
      this.client_acknowledge = new ClientAcknowledge(other.client_acknowledge);
    }
  }

  @Override
  public Authentication clone() {
    return new Authentication(this);
  }

  public int getAuth_msg_type() {
    return this.auth_msg_type;
  }

  public void setAuth_msg_type(int auth_msg_type) {
    this.auth_msg_type = auth_msg_type;
    this.__isset.auth_msg_type = true;
  }

  public void unsetAuth_msg_type() {
    this.__isset.auth_msg_type = false;
  }

  // Returns true if field auth_msg_type is set (has been asigned a value) and false otherwise
  public boolean isSetAuth_msg_type() {
    return this.__isset.auth_msg_type;
  }

  public void setAuth_msg_typeIsSet(boolean value) {
    this.__isset.auth_msg_type = value;
  }

  public ClientAuth getClient_auth() {
    return this.client_auth;
  }

  public void setClient_auth(ClientAuth client_auth) {
    this.client_auth = client_auth;
  }

  public void unsetClient_auth() {
    this.client_auth = null;
  }

  // Returns true if field client_auth is set (has been asigned a value) and false otherwise
  public boolean isSetClient_auth() {
    return this.client_auth != null;
  }

  public void setClient_authIsSet(boolean value) {
    if (!value) {
      this.client_auth = null;
    }
  }

  public ServerChallenge getServer_challenge() {
    return this.server_challenge;
  }

  public void setServer_challenge(ServerChallenge server_challenge) {
    this.server_challenge = server_challenge;
  }

  public void unsetServer_challenge() {
    this.server_challenge = null;
  }

  // Returns true if field server_challenge is set (has been asigned a value) and false otherwise
  public boolean isSetServer_challenge() {
    return this.server_challenge != null;
  }

  public void setServer_challengeIsSet(boolean value) {
    if (!value) {
      this.server_challenge = null;
    }
  }

  public ServerChallengeResponseClientChallenge getServerChallengeResponseClientChallenge() {
    return this.serverChallengeResponseClientChallenge;
  }

  public void setServerChallengeResponseClientChallenge(ServerChallengeResponseClientChallenge serverChallengeResponseClientChallenge) {
    this.serverChallengeResponseClientChallenge = serverChallengeResponseClientChallenge;
  }

  public void unsetServerChallengeResponseClientChallenge() {
    this.serverChallengeResponseClientChallenge = null;
  }

  // Returns true if field serverChallengeResponseClientChallenge is set (has been asigned a value) and false otherwise
  public boolean isSetServerChallengeResponseClientChallenge() {
    return this.serverChallengeResponseClientChallenge != null;
  }

  public void setServerChallengeResponseClientChallengeIsSet(boolean value) {
    if (!value) {
      this.serverChallengeResponseClientChallenge = null;
    }
  }

  public ClientChallengeResponse getClientChallengeResponse() {
    return this.clientChallengeResponse;
  }

  public void setClientChallengeResponse(ClientChallengeResponse clientChallengeResponse) {
    this.clientChallengeResponse = clientChallengeResponse;
  }

  public void unsetClientChallengeResponse() {
    this.clientChallengeResponse = null;
  }

  // Returns true if field clientChallengeResponse is set (has been asigned a value) and false otherwise
  public boolean isSetClientChallengeResponse() {
    return this.clientChallengeResponse != null;
  }

  public void setClientChallengeResponseIsSet(boolean value) {
    if (!value) {
      this.clientChallengeResponse = null;
    }
  }

  public ClientAcknowledge getClient_acknowledge() {
    return this.client_acknowledge;
  }

  public void setClient_acknowledge(ClientAcknowledge client_acknowledge) {
    this.client_acknowledge = client_acknowledge;
  }

  public void unsetClient_acknowledge() {
    this.client_acknowledge = null;
  }

  // Returns true if field client_acknowledge is set (has been asigned a value) and false otherwise
  public boolean isSetClient_acknowledge() {
    return this.client_acknowledge != null;
  }

  public void setClient_acknowledgeIsSet(boolean value) {
    if (!value) {
      this.client_acknowledge = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case AUTH_MSG_TYPE:
      setAuth_msg_type((Integer)value);
      break;

    case CLIENT_AUTH:
      setClient_auth((ClientAuth)value);
      break;

    case SERVER_CHALLENGE:
      setServer_challenge((ServerChallenge)value);
      break;

    case SERVERCHALLENGERESPONSECLIENTCHALLENGE:
      setServerChallengeResponseClientChallenge((ServerChallengeResponseClientChallenge)value);
      break;

    case CLIENTCHALLENGERESPONSE:
      setClientChallengeResponse((ClientChallengeResponse)value);
      break;

    case CLIENT_ACKNOWLEDGE:
      setClient_acknowledge((ClientAcknowledge)value);
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case AUTH_MSG_TYPE:
      return getAuth_msg_type();

    case CLIENT_AUTH:
      return getClient_auth();

    case SERVER_CHALLENGE:
      return getServer_challenge();

    case SERVERCHALLENGERESPONSECLIENTCHALLENGE:
      return getServerChallengeResponseClientChallenge();

    case CLIENTCHALLENGERESPONSE:
      return getClientChallengeResponse();

    case CLIENT_ACKNOWLEDGE:
      return getClient_acknowledge();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case AUTH_MSG_TYPE:
      return isSetAuth_msg_type();
    case CLIENT_AUTH:
      return isSetClient_auth();
    case SERVER_CHALLENGE:
      return isSetServer_challenge();
    case SERVERCHALLENGERESPONSECLIENTCHALLENGE:
      return isSetServerChallengeResponseClientChallenge();
    case CLIENTCHALLENGERESPONSE:
      return isSetClientChallengeResponse();
    case CLIENT_ACKNOWLEDGE:
      return isSetClient_acknowledge();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Authentication)
      return this.equals((Authentication)that);
    return false;
  }

  public boolean equals(Authentication that) {
    if (that == null)
      return false;

    boolean this_present_auth_msg_type = true;
    boolean that_present_auth_msg_type = true;
    if (this_present_auth_msg_type || that_present_auth_msg_type) {
      if (!(this_present_auth_msg_type && that_present_auth_msg_type))
        return false;
      if (this.auth_msg_type != that.auth_msg_type)
        return false;
    }

    boolean this_present_client_auth = true && this.isSetClient_auth();
    boolean that_present_client_auth = true && that.isSetClient_auth();
    if (this_present_client_auth || that_present_client_auth) {
      if (!(this_present_client_auth && that_present_client_auth))
        return false;
      if (!this.client_auth.equals(that.client_auth))
        return false;
    }

    boolean this_present_server_challenge = true && this.isSetServer_challenge();
    boolean that_present_server_challenge = true && that.isSetServer_challenge();
    if (this_present_server_challenge || that_present_server_challenge) {
      if (!(this_present_server_challenge && that_present_server_challenge))
        return false;
      if (!this.server_challenge.equals(that.server_challenge))
        return false;
    }

    boolean this_present_serverChallengeResponseClientChallenge = true && this.isSetServerChallengeResponseClientChallenge();
    boolean that_present_serverChallengeResponseClientChallenge = true && that.isSetServerChallengeResponseClientChallenge();
    if (this_present_serverChallengeResponseClientChallenge || that_present_serverChallengeResponseClientChallenge) {
      if (!(this_present_serverChallengeResponseClientChallenge && that_present_serverChallengeResponseClientChallenge))
        return false;
      if (!this.serverChallengeResponseClientChallenge.equals(that.serverChallengeResponseClientChallenge))
        return false;
    }

    boolean this_present_clientChallengeResponse = true && this.isSetClientChallengeResponse();
    boolean that_present_clientChallengeResponse = true && that.isSetClientChallengeResponse();
    if (this_present_clientChallengeResponse || that_present_clientChallengeResponse) {
      if (!(this_present_clientChallengeResponse && that_present_clientChallengeResponse))
        return false;
      if (!this.clientChallengeResponse.equals(that.clientChallengeResponse))
        return false;
    }

    boolean this_present_client_acknowledge = true && this.isSetClient_acknowledge();
    boolean that_present_client_acknowledge = true && that.isSetClient_acknowledge();
    if (this_present_client_acknowledge || that_present_client_acknowledge) {
      if (!(this_present_client_acknowledge && that_present_client_acknowledge))
        return false;
      if (!this.client_acknowledge.equals(that.client_acknowledge))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case AUTH_MSG_TYPE:
          if (field.type == TType.I32) {
            this.auth_msg_type = iprot.readI32();
            this.__isset.auth_msg_type = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLIENT_AUTH:
          if (field.type == TType.STRUCT) {
            this.client_auth = new ClientAuth();
            this.client_auth.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SERVER_CHALLENGE:
          if (field.type == TType.STRUCT) {
            this.server_challenge = new ServerChallenge();
            this.server_challenge.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SERVERCHALLENGERESPONSECLIENTCHALLENGE:
          if (field.type == TType.STRUCT) {
            this.serverChallengeResponseClientChallenge = new ServerChallengeResponseClientChallenge();
            this.serverChallengeResponseClientChallenge.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLIENTCHALLENGERESPONSE:
          if (field.type == TType.STRUCT) {
            this.clientChallengeResponse = new ClientChallengeResponse();
            this.clientChallengeResponse.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CLIENT_ACKNOWLEDGE:
          if (field.type == TType.STRUCT) {
            this.client_acknowledge = new ClientAcknowledge();
            this.client_acknowledge.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(AUTH_MSG_TYPE_FIELD_DESC);
    oprot.writeI32(this.auth_msg_type);
    oprot.writeFieldEnd();
    if (this.client_auth != null) {
      oprot.writeFieldBegin(CLIENT_AUTH_FIELD_DESC);
      this.client_auth.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.server_challenge != null) {
      oprot.writeFieldBegin(SERVER_CHALLENGE_FIELD_DESC);
      this.server_challenge.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.serverChallengeResponseClientChallenge != null) {
      oprot.writeFieldBegin(SERVER_CHALLENGE_RESPONSE_CLIENT_CHALLENGE_FIELD_DESC);
      this.serverChallengeResponseClientChallenge.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.clientChallengeResponse != null) {
      oprot.writeFieldBegin(CLIENT_CHALLENGE_RESPONSE_FIELD_DESC);
      this.clientChallengeResponse.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.client_acknowledge != null) {
      oprot.writeFieldBegin(CLIENT_ACKNOWLEDGE_FIELD_DESC);
      this.client_acknowledge.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Authentication(");
    boolean first = true;

    sb.append("auth_msg_type:");
    sb.append(this.auth_msg_type);
    first = false;
    if (isSetClient_auth()) {
      if (!first) sb.append(", ");
      sb.append("client_auth:");
      if (this.client_auth == null) {
        sb.append("null");
      } else {
        sb.append(this.client_auth);
      }
      first = false;
    }
    if (isSetServer_challenge()) {
      if (!first) sb.append(", ");
      sb.append("server_challenge:");
      if (this.server_challenge == null) {
        sb.append("null");
      } else {
        sb.append(this.server_challenge);
      }
      first = false;
    }
    if (isSetServerChallengeResponseClientChallenge()) {
      if (!first) sb.append(", ");
      sb.append("serverChallengeResponseClientChallenge:");
      if (this.serverChallengeResponseClientChallenge == null) {
        sb.append("null");
      } else {
        sb.append(this.serverChallengeResponseClientChallenge);
      }
      first = false;
    }
    if (isSetClientChallengeResponse()) {
      if (!first) sb.append(", ");
      sb.append("clientChallengeResponse:");
      if (this.clientChallengeResponse == null) {
        sb.append("null");
      } else {
        sb.append(this.clientChallengeResponse);
      }
      first = false;
    }
    if (isSetClient_acknowledge()) {
      if (!first) sb.append(", ");
      sb.append("client_acknowledge:");
      if (this.client_acknowledge == null) {
        sb.append("null");
      } else {
        sb.append(this.client_acknowledge);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (__isset.auth_msg_type && !AuthMessageType.VALID_VALUES.contains(auth_msg_type)){
      throw new TProtocolException("Invalid value of field 'auth_msg_type'!");
    }
  }

}

