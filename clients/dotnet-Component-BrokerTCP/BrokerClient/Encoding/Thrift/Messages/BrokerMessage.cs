/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace SapoBrokerClient.Encoding.Thrift.Messages
{

  [Serializable]
  public partial class BrokerMessage : TBase
  {
    private string message_id;
    private byte[] payload;
    private long expiration;
    private long timestamp;

    public string Message_id
    {
      get
      {
        return message_id;
      }
      set
      {
        __isset.message_id = true;
        this.message_id = value;
      }
    }

    public byte[] Payload
    {
      get
      {
        return payload;
      }
      set
      {
        __isset.payload = true;
        this.payload = value;
      }
    }

    public long Expiration
    {
      get
      {
        return expiration;
      }
      set
      {
        __isset.expiration = true;
        this.expiration = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this.timestamp = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool message_id;
      public bool payload;
      public bool expiration;
      public bool timestamp;
    }

    public BrokerMessage() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.message_id = iprot.ReadString();
              this.__isset.message_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.payload = iprot.ReadBinary();
              this.__isset.payload = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              this.expiration = iprot.ReadI64();
              this.__isset.expiration = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              this.timestamp = iprot.ReadI64();
              this.__isset.timestamp = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BrokerMessage");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.message_id != null && __isset.message_id) {
        field.Name = "message_id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.message_id);
        oprot.WriteFieldEnd();
      }
      if (this.payload != null && __isset.payload) {
        field.Name = "payload";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.payload);
        oprot.WriteFieldEnd();
      }
      if (__isset.expiration) {
        field.Name = "expiration";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.expiration);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BrokerMessage(");
      sb.Append("message_id: ");
      sb.Append(this.message_id);
      sb.Append(",payload: ");
      sb.Append(this.payload);
      sb.Append(",expiration: ");
      sb.Append(this.expiration);
      sb.Append(",timestamp: ");
      sb.Append(this.timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
