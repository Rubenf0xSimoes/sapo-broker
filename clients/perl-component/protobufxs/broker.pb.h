// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: broker.proto

#ifndef PROTOBUF_broker_2eproto__INCLUDED
#define PROTOBUF_broker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace SAPO {
namespace Broker {
namespace Codecs {
namespace Autogen {
namespace ProtobufXS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_broker_2eproto();
void protobuf_AssignDesc_broker_2eproto();
void protobuf_ShutdownFile_broker_2eproto();

class Atom;
class Atom_Parameter;
class Atom_Header;
class Atom_BrokerMessage;
class Atom_Publish;
class Atom_Poll;
class Atom_Accepted;
class Atom_AcknowledgeMessage;
class Atom_Subscribe;
class Atom_Unsubscribe;
class Atom_Notification;
class Atom_Fault;
class Atom_Ping;
class Atom_Pong;
class Atom_Authentication;
class Atom_Action;

enum Atom_Action_ActionType {
  Atom_Action_ActionType_PUBLISH = 0,
  Atom_Action_ActionType_POLL = 1,
  Atom_Action_ActionType_ACCEPTED = 2,
  Atom_Action_ActionType_ACKNOWLEDGE_MESSAGE = 3,
  Atom_Action_ActionType_SUBSCRIBE = 4,
  Atom_Action_ActionType_UNSUBSCRIBE = 5,
  Atom_Action_ActionType_NOTIFICATION = 6,
  Atom_Action_ActionType_FAULT = 7,
  Atom_Action_ActionType_PING = 8,
  Atom_Action_ActionType_PONG = 9,
  Atom_Action_ActionType_AUTH = 10
};
bool Atom_Action_ActionType_IsValid(int value);
const Atom_Action_ActionType Atom_Action_ActionType_ActionType_MIN = Atom_Action_ActionType_PUBLISH;
const Atom_Action_ActionType Atom_Action_ActionType_ActionType_MAX = Atom_Action_ActionType_AUTH;
const int Atom_Action_ActionType_ActionType_ARRAYSIZE = Atom_Action_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Atom_Action_ActionType_descriptor();
inline const ::std::string& Atom_Action_ActionType_Name(Atom_Action_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Atom_Action_ActionType_descriptor(), value);
}
inline bool Atom_Action_ActionType_Parse(
    const ::std::string& name, Atom_Action_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Atom_Action_ActionType>(
    Atom_Action_ActionType_descriptor(), name, value);
}
enum Atom_DestinationType {
  Atom_DestinationType_TOPIC = 0,
  Atom_DestinationType_QUEUE = 1,
  Atom_DestinationType_VIRTUAL_QUEUE = 2
};
bool Atom_DestinationType_IsValid(int value);
const Atom_DestinationType Atom_DestinationType_DestinationType_MIN = Atom_DestinationType_TOPIC;
const Atom_DestinationType Atom_DestinationType_DestinationType_MAX = Atom_DestinationType_VIRTUAL_QUEUE;
const int Atom_DestinationType_DestinationType_ARRAYSIZE = Atom_DestinationType_DestinationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Atom_DestinationType_descriptor();
inline const ::std::string& Atom_DestinationType_Name(Atom_DestinationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Atom_DestinationType_descriptor(), value);
}
inline bool Atom_DestinationType_Parse(
    const ::std::string& name, Atom_DestinationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Atom_DestinationType>(
    Atom_DestinationType_descriptor(), name, value);
}
// ===================================================================

class Atom_Parameter : public ::google::protobuf::Message {
 public:
  Atom_Parameter();
  virtual ~Atom_Parameter();
  
  Atom_Parameter(const Atom_Parameter& from);
  
  inline Atom_Parameter& operator=(const Atom_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Parameter& default_instance();
  
  void Swap(Atom_Parameter* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Parameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Parameter& from);
  void MergeFrom(const Atom_Parameter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Parameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Parameter* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Header : public ::google::protobuf::Message {
 public:
  Atom_Header();
  virtual ~Atom_Header();
  
  Atom_Header(const Atom_Header& from);
  
  inline Atom_Header& operator=(const Atom_Header& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Header& default_instance();
  
  void Swap(Atom_Header* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Header& from);
  void MergeFrom(const Atom_Header& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Parameter parameter = 1;
  inline int parameter_size() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 1;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter& parameter(int index) const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter* mutable_parameter(int index);
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter* add_parameter();
  inline const ::google::protobuf::RepeatedPtrField< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter >&
      parameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter >*
      mutable_parameter();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Header)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter > parameter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Header* default_instance_;
};
// -------------------------------------------------------------------

class Atom_BrokerMessage : public ::google::protobuf::Message {
 public:
  Atom_BrokerMessage();
  virtual ~Atom_BrokerMessage();
  
  Atom_BrokerMessage(const Atom_BrokerMessage& from);
  
  inline Atom_BrokerMessage& operator=(const Atom_BrokerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_BrokerMessage& default_instance();
  
  void Swap(Atom_BrokerMessage* other);
  
  // implements Message ----------------------------------------------
  
  Atom_BrokerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_BrokerMessage& from);
  void MergeFrom(const Atom_BrokerMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string message_id = 1;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  inline const ::std::string& message_id() const;
  inline void set_message_id(const ::std::string& value);
  inline void set_message_id(const char* value);
  inline void set_message_id(const char* value, size_t size);
  inline ::std::string* mutable_message_id();
  inline ::std::string* release_message_id();
  
  // required bytes payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  
  // optional int64 expiration = 3;
  inline bool has_expiration() const;
  inline void clear_expiration();
  static const int kExpirationFieldNumber = 3;
  inline ::google::protobuf::int64 expiration() const;
  inline void set_expiration(::google::protobuf::int64 value);
  
  // optional int64 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.BrokerMessage)
 private:
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_expiration();
  inline void clear_has_expiration();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_id_;
  ::std::string* payload_;
  ::google::protobuf::int64 expiration_;
  ::google::protobuf::int64 timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_BrokerMessage* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Publish : public ::google::protobuf::Message {
 public:
  Atom_Publish();
  virtual ~Atom_Publish();
  
  Atom_Publish(const Atom_Publish& from);
  
  inline Atom_Publish& operator=(const Atom_Publish& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Publish& default_instance();
  
  void Swap(Atom_Publish* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Publish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Publish& from);
  void MergeFrom(const Atom_Publish& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.DestinationType destination_type = 2;
  inline bool has_destination_type() const;
  inline void clear_destination_type();
  static const int kDestinationTypeFieldNumber = 2;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType destination_type() const;
  inline void set_destination_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType value);
  
  // required string destination = 3;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 3;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  
  // required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.BrokerMessage message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage& message() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* mutable_message();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* release_message();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Publish)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_destination_type();
  inline void clear_has_destination_type();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  ::std::string* destination_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* message_;
  int destination_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Publish* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Poll : public ::google::protobuf::Message {
 public:
  Atom_Poll();
  virtual ~Atom_Poll();
  
  Atom_Poll(const Atom_Poll& from);
  
  inline Atom_Poll& operator=(const Atom_Poll& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Poll& default_instance();
  
  void Swap(Atom_Poll* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Poll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Poll& from);
  void MergeFrom(const Atom_Poll& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // required string destination = 2;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 2;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  
  // required int64 timeout = 3;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  inline ::google::protobuf::int64 timeout() const;
  inline void set_timeout(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Poll)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  ::std::string* destination_;
  ::google::protobuf::int64 timeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Poll* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Accepted : public ::google::protobuf::Message {
 public:
  Atom_Accepted();
  virtual ~Atom_Accepted();
  
  Atom_Accepted(const Atom_Accepted& from);
  
  inline Atom_Accepted& operator=(const Atom_Accepted& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Accepted& default_instance();
  
  void Swap(Atom_Accepted* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Accepted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Accepted& from);
  void MergeFrom(const Atom_Accepted& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Accepted)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Accepted* default_instance_;
};
// -------------------------------------------------------------------

class Atom_AcknowledgeMessage : public ::google::protobuf::Message {
 public:
  Atom_AcknowledgeMessage();
  virtual ~Atom_AcknowledgeMessage();
  
  Atom_AcknowledgeMessage(const Atom_AcknowledgeMessage& from);
  
  inline Atom_AcknowledgeMessage& operator=(const Atom_AcknowledgeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_AcknowledgeMessage& default_instance();
  
  void Swap(Atom_AcknowledgeMessage* other);
  
  // implements Message ----------------------------------------------
  
  Atom_AcknowledgeMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_AcknowledgeMessage& from);
  void MergeFrom(const Atom_AcknowledgeMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // required string message_id = 2;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  inline const ::std::string& message_id() const;
  inline void set_message_id(const ::std::string& value);
  inline void set_message_id(const char* value);
  inline void set_message_id(const char* value, size_t size);
  inline ::std::string* mutable_message_id();
  inline ::std::string* release_message_id();
  
  // required string destination = 3;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 3;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.AcknowledgeMessage)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_destination();
  inline void clear_has_destination();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  ::std::string* message_id_;
  ::std::string* destination_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_AcknowledgeMessage* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Subscribe : public ::google::protobuf::Message {
 public:
  Atom_Subscribe();
  virtual ~Atom_Subscribe();
  
  Atom_Subscribe(const Atom_Subscribe& from);
  
  inline Atom_Subscribe& operator=(const Atom_Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Subscribe& default_instance();
  
  void Swap(Atom_Subscribe* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Subscribe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Subscribe& from);
  void MergeFrom(const Atom_Subscribe& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // required string destination = 2;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 2;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  
  // required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.DestinationType destination_type = 3;
  inline bool has_destination_type() const;
  inline void clear_destination_type();
  static const int kDestinationTypeFieldNumber = 3;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType destination_type() const;
  inline void set_destination_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType value);
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Subscribe)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_destination_type();
  inline void clear_has_destination_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  ::std::string* destination_;
  int destination_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Subscribe* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Unsubscribe : public ::google::protobuf::Message {
 public:
  Atom_Unsubscribe();
  virtual ~Atom_Unsubscribe();
  
  Atom_Unsubscribe(const Atom_Unsubscribe& from);
  
  inline Atom_Unsubscribe& operator=(const Atom_Unsubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Unsubscribe& default_instance();
  
  void Swap(Atom_Unsubscribe* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Unsubscribe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Unsubscribe& from);
  void MergeFrom(const Atom_Unsubscribe& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // required string destination = 2;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 2;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  
  // required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.DestinationType destination_type = 3;
  inline bool has_destination_type() const;
  inline void clear_destination_type();
  static const int kDestinationTypeFieldNumber = 3;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType destination_type() const;
  inline void set_destination_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType value);
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Unsubscribe)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_destination_type();
  inline void clear_has_destination_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  ::std::string* destination_;
  int destination_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Unsubscribe* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Notification : public ::google::protobuf::Message {
 public:
  Atom_Notification();
  virtual ~Atom_Notification();
  
  Atom_Notification(const Atom_Notification& from);
  
  inline Atom_Notification& operator=(const Atom_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Notification& default_instance();
  
  void Swap(Atom_Notification* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Notification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Notification& from);
  void MergeFrom(const Atom_Notification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string destination = 1;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 1;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  
  // required string subscription = 2;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  inline const ::std::string& subscription() const;
  inline void set_subscription(const ::std::string& value);
  inline void set_subscription(const char* value);
  inline void set_subscription(const char* value, size_t size);
  inline ::std::string* mutable_subscription();
  inline ::std::string* release_subscription();
  
  // required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.DestinationType destination_type = 3;
  inline bool has_destination_type() const;
  inline void clear_destination_type();
  static const int kDestinationTypeFieldNumber = 3;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType destination_type() const;
  inline void set_destination_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType value);
  
  // required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.BrokerMessage message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage& message() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* mutable_message();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* release_message();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Notification)
 private:
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_subscription();
  inline void clear_has_subscription();
  inline void set_has_destination_type();
  inline void clear_has_destination_type();
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* destination_;
  ::std::string* subscription_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* message_;
  int destination_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Notification* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Fault : public ::google::protobuf::Message {
 public:
  Atom_Fault();
  virtual ~Atom_Fault();
  
  Atom_Fault(const Atom_Fault& from);
  
  inline Atom_Fault& operator=(const Atom_Fault& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Fault& default_instance();
  
  void Swap(Atom_Fault* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Fault* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Fault& from);
  void MergeFrom(const Atom_Fault& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // required string fault_code = 2;
  inline bool has_fault_code() const;
  inline void clear_fault_code();
  static const int kFaultCodeFieldNumber = 2;
  inline const ::std::string& fault_code() const;
  inline void set_fault_code(const ::std::string& value);
  inline void set_fault_code(const char* value);
  inline void set_fault_code(const char* value, size_t size);
  inline ::std::string* mutable_fault_code();
  inline ::std::string* release_fault_code();
  
  // required string fault_message = 3;
  inline bool has_fault_message() const;
  inline void clear_fault_message();
  static const int kFaultMessageFieldNumber = 3;
  inline const ::std::string& fault_message() const;
  inline void set_fault_message(const ::std::string& value);
  inline void set_fault_message(const char* value);
  inline void set_fault_message(const char* value, size_t size);
  inline ::std::string* mutable_fault_message();
  inline ::std::string* release_fault_message();
  
  // optional string fault_detail = 4;
  inline bool has_fault_detail() const;
  inline void clear_fault_detail();
  static const int kFaultDetailFieldNumber = 4;
  inline const ::std::string& fault_detail() const;
  inline void set_fault_detail(const ::std::string& value);
  inline void set_fault_detail(const char* value);
  inline void set_fault_detail(const char* value, size_t size);
  inline ::std::string* mutable_fault_detail();
  inline ::std::string* release_fault_detail();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Fault)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_fault_code();
  inline void clear_has_fault_code();
  inline void set_has_fault_message();
  inline void clear_has_fault_message();
  inline void set_has_fault_detail();
  inline void clear_has_fault_detail();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  ::std::string* fault_code_;
  ::std::string* fault_message_;
  ::std::string* fault_detail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Fault* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Ping : public ::google::protobuf::Message {
 public:
  Atom_Ping();
  virtual ~Atom_Ping();
  
  Atom_Ping(const Atom_Ping& from);
  
  inline Atom_Ping& operator=(const Atom_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Ping& default_instance();
  
  void Swap(Atom_Ping* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Ping& from);
  void MergeFrom(const Atom_Ping& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Ping)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Ping* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Pong : public ::google::protobuf::Message {
 public:
  Atom_Pong();
  virtual ~Atom_Pong();
  
  Atom_Pong(const Atom_Pong& from);
  
  inline Atom_Pong& operator=(const Atom_Pong& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Pong& default_instance();
  
  void Swap(Atom_Pong* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Pong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Pong& from);
  void MergeFrom(const Atom_Pong& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Pong)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Pong* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Authentication : public ::google::protobuf::Message {
 public:
  Atom_Authentication();
  virtual ~Atom_Authentication();
  
  Atom_Authentication(const Atom_Authentication& from);
  
  inline Atom_Authentication& operator=(const Atom_Authentication& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Authentication& default_instance();
  
  void Swap(Atom_Authentication* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Authentication* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Authentication& from);
  void MergeFrom(const Atom_Authentication& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string action_id = 1;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 1;
  inline const ::std::string& action_id() const;
  inline void set_action_id(const ::std::string& value);
  inline void set_action_id(const char* value);
  inline void set_action_id(const char* value, size_t size);
  inline ::std::string* mutable_action_id();
  inline ::std::string* release_action_id();
  
  // required string authentication_type = 2;
  inline bool has_authentication_type() const;
  inline void clear_authentication_type();
  static const int kAuthenticationTypeFieldNumber = 2;
  inline const ::std::string& authentication_type() const;
  inline void set_authentication_type(const ::std::string& value);
  inline void set_authentication_type(const char* value);
  inline void set_authentication_type(const char* value, size_t size);
  inline ::std::string* mutable_authentication_type();
  inline ::std::string* release_authentication_type();
  
  // required bytes token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // optional string user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  
  // repeated string role = 5;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 5;
  inline const ::std::string& role(int index) const;
  inline ::std::string* mutable_role(int index);
  inline void set_role(int index, const ::std::string& value);
  inline void set_role(int index, const char* value);
  inline void set_role(int index, const char* value, size_t size);
  inline ::std::string* add_role();
  inline void add_role(const ::std::string& value);
  inline void add_role(const char* value);
  inline void add_role(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& role() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_role();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Authentication)
 private:
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_authentication_type();
  inline void clear_has_authentication_type();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_id_;
  ::std::string* authentication_type_;
  ::std::string* token_;
  ::std::string* user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> role_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Authentication* default_instance_;
};
// -------------------------------------------------------------------

class Atom_Action : public ::google::protobuf::Message {
 public:
  Atom_Action();
  virtual ~Atom_Action();
  
  Atom_Action(const Atom_Action& from);
  
  inline Atom_Action& operator=(const Atom_Action& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom_Action& default_instance();
  
  void Swap(Atom_Action* other);
  
  // implements Message ----------------------------------------------
  
  Atom_Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom_Action& from);
  void MergeFrom(const Atom_Action& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Atom_Action_ActionType ActionType;
  static const ActionType PUBLISH = Atom_Action_ActionType_PUBLISH;
  static const ActionType POLL = Atom_Action_ActionType_POLL;
  static const ActionType ACCEPTED = Atom_Action_ActionType_ACCEPTED;
  static const ActionType ACKNOWLEDGE_MESSAGE = Atom_Action_ActionType_ACKNOWLEDGE_MESSAGE;
  static const ActionType SUBSCRIBE = Atom_Action_ActionType_SUBSCRIBE;
  static const ActionType UNSUBSCRIBE = Atom_Action_ActionType_UNSUBSCRIBE;
  static const ActionType NOTIFICATION = Atom_Action_ActionType_NOTIFICATION;
  static const ActionType FAULT = Atom_Action_ActionType_FAULT;
  static const ActionType PING = Atom_Action_ActionType_PING;
  static const ActionType PONG = Atom_Action_ActionType_PONG;
  static const ActionType AUTH = Atom_Action_ActionType_AUTH;
  static inline bool ActionType_IsValid(int value) {
    return Atom_Action_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    Atom_Action_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    Atom_Action_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    Atom_Action_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return Atom_Action_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return Atom_Action_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return Atom_Action_ActionType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Publish publish = 1;
  inline bool has_publish() const;
  inline void clear_publish();
  static const int kPublishFieldNumber = 1;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish& publish() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish* mutable_publish();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish* release_publish();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Poll poll = 2;
  inline bool has_poll() const;
  inline void clear_poll();
  static const int kPollFieldNumber = 2;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll& poll() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll* mutable_poll();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll* release_poll();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Accepted accepted = 3;
  inline bool has_accepted() const;
  inline void clear_accepted();
  static const int kAcceptedFieldNumber = 3;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted& accepted() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted* mutable_accepted();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted* release_accepted();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.AcknowledgeMessage ack_message = 4;
  inline bool has_ack_message() const;
  inline void clear_ack_message();
  static const int kAckMessageFieldNumber = 4;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage& ack_message() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage* mutable_ack_message();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage* release_ack_message();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Subscribe subscribe = 5;
  inline bool has_subscribe() const;
  inline void clear_subscribe();
  static const int kSubscribeFieldNumber = 5;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe& subscribe() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe* mutable_subscribe();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe* release_subscribe();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Unsubscribe unsubscribe = 6;
  inline bool has_unsubscribe() const;
  inline void clear_unsubscribe();
  static const int kUnsubscribeFieldNumber = 6;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe& unsubscribe() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe* mutable_unsubscribe();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe* release_unsubscribe();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Notification notification = 7;
  inline bool has_notification() const;
  inline void clear_notification();
  static const int kNotificationFieldNumber = 7;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification& notification() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification* mutable_notification();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification* release_notification();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Fault fault = 8;
  inline bool has_fault() const;
  inline void clear_fault();
  static const int kFaultFieldNumber = 8;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault& fault() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault* mutable_fault();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault* release_fault();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Ping ping = 9;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 9;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping& ping() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping* mutable_ping();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping* release_ping();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Pong pong = 10;
  inline bool has_pong() const;
  inline void clear_pong();
  static const int kPongFieldNumber = 10;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong& pong() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong* mutable_pong();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong* release_pong();
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Authentication auth = 11;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 11;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication& auth() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication* mutable_auth();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication* release_auth();
  
  // required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Action.ActionType action_type = 12;
  inline bool has_action_type() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 12;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action_ActionType action_type() const;
  inline void set_action_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action_ActionType value);
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Action)
 private:
  inline void set_has_publish();
  inline void clear_has_publish();
  inline void set_has_poll();
  inline void clear_has_poll();
  inline void set_has_accepted();
  inline void clear_has_accepted();
  inline void set_has_ack_message();
  inline void clear_has_ack_message();
  inline void set_has_subscribe();
  inline void clear_has_subscribe();
  inline void set_has_unsubscribe();
  inline void clear_has_unsubscribe();
  inline void set_has_notification();
  inline void clear_has_notification();
  inline void set_has_fault();
  inline void clear_has_fault();
  inline void set_has_ping();
  inline void clear_has_ping();
  inline void set_has_pong();
  inline void clear_has_pong();
  inline void set_has_auth();
  inline void clear_has_auth();
  inline void set_has_action_type();
  inline void clear_has_action_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish* publish_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll* poll_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted* accepted_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage* ack_message_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe* subscribe_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe* unsubscribe_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification* notification_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault* fault_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping* ping_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong* pong_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication* auth_;
  int action_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom_Action* default_instance_;
};
// -------------------------------------------------------------------

class Atom : public ::google::protobuf::Message {
 public:
  Atom();
  virtual ~Atom();
  
  Atom(const Atom& from);
  
  inline Atom& operator=(const Atom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atom& default_instance();
  
  void Swap(Atom* other);
  
  // implements Message ----------------------------------------------
  
  Atom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Atom& from);
  void MergeFrom(const Atom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Atom_Parameter Parameter;
  typedef Atom_Header Header;
  typedef Atom_BrokerMessage BrokerMessage;
  typedef Atom_Publish Publish;
  typedef Atom_Poll Poll;
  typedef Atom_Accepted Accepted;
  typedef Atom_AcknowledgeMessage AcknowledgeMessage;
  typedef Atom_Subscribe Subscribe;
  typedef Atom_Unsubscribe Unsubscribe;
  typedef Atom_Notification Notification;
  typedef Atom_Fault Fault;
  typedef Atom_Ping Ping;
  typedef Atom_Pong Pong;
  typedef Atom_Authentication Authentication;
  typedef Atom_Action Action;
  
  typedef Atom_DestinationType DestinationType;
  static const DestinationType TOPIC = Atom_DestinationType_TOPIC;
  static const DestinationType QUEUE = Atom_DestinationType_QUEUE;
  static const DestinationType VIRTUAL_QUEUE = Atom_DestinationType_VIRTUAL_QUEUE;
  static inline bool DestinationType_IsValid(int value) {
    return Atom_DestinationType_IsValid(value);
  }
  static const DestinationType DestinationType_MIN =
    Atom_DestinationType_DestinationType_MIN;
  static const DestinationType DestinationType_MAX =
    Atom_DestinationType_DestinationType_MAX;
  static const int DestinationType_ARRAYSIZE =
    Atom_DestinationType_DestinationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DestinationType_descriptor() {
    return Atom_DestinationType_descriptor();
  }
  static inline const ::std::string& DestinationType_Name(DestinationType value) {
    return Atom_DestinationType_Name(value);
  }
  static inline bool DestinationType_Parse(const ::std::string& name,
      DestinationType* value) {
    return Atom_DestinationType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header& header() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header* mutable_header();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header* release_header();
  
  // required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Action action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action& action() const;
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action* mutable_action();
  inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action* release_action();
  
  // @@protoc_insertion_point(class_scope:SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_action();
  inline void clear_has_action();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header* header_;
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action* action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_broker_2eproto();
  friend void protobuf_AssignDesc_broker_2eproto();
  friend void protobuf_ShutdownFile_broker_2eproto();
  
  void InitAsDefaultInstance();
  static Atom* default_instance_;
};
// ===================================================================


// ===================================================================

// Atom_Parameter

// required string name = 1;
inline bool Atom_Parameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Parameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Parameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Parameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Atom_Parameter::name() const {
  return *name_;
}
inline void Atom_Parameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Atom_Parameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Atom_Parameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Parameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Atom_Parameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool Atom_Parameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_Parameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_Parameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_Parameter::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Atom_Parameter::value() const {
  return *value_;
}
inline void Atom_Parameter::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Atom_Parameter::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Atom_Parameter::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Parameter::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Atom_Parameter::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Atom_Header

// repeated .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Parameter parameter = 1;
inline int Atom_Header::parameter_size() const {
  return parameter_.size();
}
inline void Atom_Header::clear_parameter() {
  parameter_.Clear();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter& Atom_Header::parameter(int index) const {
  return parameter_.Get(index);
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter* Atom_Header::mutable_parameter(int index) {
  return parameter_.Mutable(index);
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter* Atom_Header::add_parameter() {
  return parameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter >&
Atom_Header::parameter() const {
  return parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Parameter >*
Atom_Header::mutable_parameter() {
  return &parameter_;
}

// -------------------------------------------------------------------

// Atom_BrokerMessage

// optional string message_id = 1;
inline bool Atom_BrokerMessage::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_BrokerMessage::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_BrokerMessage::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_BrokerMessage::clear_message_id() {
  if (message_id_ != &::google::protobuf::internal::kEmptyString) {
    message_id_->clear();
  }
  clear_has_message_id();
}
inline const ::std::string& Atom_BrokerMessage::message_id() const {
  return *message_id_;
}
inline void Atom_BrokerMessage::set_message_id(const ::std::string& value) {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    message_id_ = new ::std::string;
  }
  message_id_->assign(value);
}
inline void Atom_BrokerMessage::set_message_id(const char* value) {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    message_id_ = new ::std::string;
  }
  message_id_->assign(value);
}
inline void Atom_BrokerMessage::set_message_id(const char* value, size_t size) {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    message_id_ = new ::std::string;
  }
  message_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_BrokerMessage::mutable_message_id() {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    message_id_ = new ::std::string;
  }
  return message_id_;
}
inline ::std::string* Atom_BrokerMessage::release_message_id() {
  clear_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_id_;
    message_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes payload = 2;
inline bool Atom_BrokerMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_BrokerMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_BrokerMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_BrokerMessage::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Atom_BrokerMessage::payload() const {
  return *payload_;
}
inline void Atom_BrokerMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Atom_BrokerMessage::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Atom_BrokerMessage::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_BrokerMessage::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* Atom_BrokerMessage::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 expiration = 3;
inline bool Atom_BrokerMessage::has_expiration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_BrokerMessage::set_has_expiration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_BrokerMessage::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_BrokerMessage::clear_expiration() {
  expiration_ = GOOGLE_LONGLONG(0);
  clear_has_expiration();
}
inline ::google::protobuf::int64 Atom_BrokerMessage::expiration() const {
  return expiration_;
}
inline void Atom_BrokerMessage::set_expiration(::google::protobuf::int64 value) {
  set_has_expiration();
  expiration_ = value;
}

// optional int64 timestamp = 4;
inline bool Atom_BrokerMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Atom_BrokerMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Atom_BrokerMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Atom_BrokerMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Atom_BrokerMessage::timestamp() const {
  return timestamp_;
}
inline void Atom_BrokerMessage::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// Atom_Publish

// optional string action_id = 1;
inline bool Atom_Publish::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Publish::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Publish::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Publish::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_Publish::action_id() const {
  return *action_id_;
}
inline void Atom_Publish::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Publish::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Publish::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Publish::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_Publish::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.DestinationType destination_type = 2;
inline bool Atom_Publish::has_destination_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_Publish::set_has_destination_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_Publish::clear_has_destination_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_Publish::clear_destination_type() {
  destination_type_ = 0;
  clear_has_destination_type();
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType Atom_Publish::destination_type() const {
  return static_cast< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType >(destination_type_);
}
inline void Atom_Publish::set_destination_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType value) {
  GOOGLE_DCHECK(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType_IsValid(value));
  set_has_destination_type();
  destination_type_ = value;
}

// required string destination = 3;
inline bool Atom_Publish::has_destination() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_Publish::set_has_destination() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_Publish::clear_has_destination() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_Publish::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& Atom_Publish::destination() const {
  return *destination_;
}
inline void Atom_Publish::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Publish::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Publish::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Publish::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* Atom_Publish::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.BrokerMessage message = 4;
inline bool Atom_Publish::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Atom_Publish::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Atom_Publish::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Atom_Publish::clear_message() {
  if (message_ != NULL) message_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage::Clear();
  clear_has_message();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage& Atom_Publish::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* Atom_Publish::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage;
  return message_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* Atom_Publish::release_message() {
  clear_has_message();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* temp = message_;
  message_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Atom_Poll

// optional string action_id = 1;
inline bool Atom_Poll::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Poll::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Poll::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Poll::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_Poll::action_id() const {
  return *action_id_;
}
inline void Atom_Poll::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Poll::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Poll::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Poll::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_Poll::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string destination = 2;
inline bool Atom_Poll::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_Poll::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_Poll::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_Poll::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& Atom_Poll::destination() const {
  return *destination_;
}
inline void Atom_Poll::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Poll::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Poll::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Poll::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* Atom_Poll::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 timeout = 3;
inline bool Atom_Poll::has_timeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_Poll::set_has_timeout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_Poll::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_Poll::clear_timeout() {
  timeout_ = GOOGLE_LONGLONG(0);
  clear_has_timeout();
}
inline ::google::protobuf::int64 Atom_Poll::timeout() const {
  return timeout_;
}
inline void Atom_Poll::set_timeout(::google::protobuf::int64 value) {
  set_has_timeout();
  timeout_ = value;
}

// -------------------------------------------------------------------

// Atom_Accepted

// required string action_id = 1;
inline bool Atom_Accepted::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Accepted::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Accepted::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Accepted::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_Accepted::action_id() const {
  return *action_id_;
}
inline void Atom_Accepted::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Accepted::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Accepted::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Accepted::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_Accepted::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Atom_AcknowledgeMessage

// optional string action_id = 1;
inline bool Atom_AcknowledgeMessage::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_AcknowledgeMessage::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_AcknowledgeMessage::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_AcknowledgeMessage::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_AcknowledgeMessage::action_id() const {
  return *action_id_;
}
inline void Atom_AcknowledgeMessage::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_AcknowledgeMessage::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_AcknowledgeMessage::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_AcknowledgeMessage::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_AcknowledgeMessage::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string message_id = 2;
inline bool Atom_AcknowledgeMessage::has_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_AcknowledgeMessage::set_has_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_AcknowledgeMessage::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_AcknowledgeMessage::clear_message_id() {
  if (message_id_ != &::google::protobuf::internal::kEmptyString) {
    message_id_->clear();
  }
  clear_has_message_id();
}
inline const ::std::string& Atom_AcknowledgeMessage::message_id() const {
  return *message_id_;
}
inline void Atom_AcknowledgeMessage::set_message_id(const ::std::string& value) {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    message_id_ = new ::std::string;
  }
  message_id_->assign(value);
}
inline void Atom_AcknowledgeMessage::set_message_id(const char* value) {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    message_id_ = new ::std::string;
  }
  message_id_->assign(value);
}
inline void Atom_AcknowledgeMessage::set_message_id(const char* value, size_t size) {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    message_id_ = new ::std::string;
  }
  message_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_AcknowledgeMessage::mutable_message_id() {
  set_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    message_id_ = new ::std::string;
  }
  return message_id_;
}
inline ::std::string* Atom_AcknowledgeMessage::release_message_id() {
  clear_has_message_id();
  if (message_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_id_;
    message_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string destination = 3;
inline bool Atom_AcknowledgeMessage::has_destination() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_AcknowledgeMessage::set_has_destination() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_AcknowledgeMessage::clear_has_destination() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_AcknowledgeMessage::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& Atom_AcknowledgeMessage::destination() const {
  return *destination_;
}
inline void Atom_AcknowledgeMessage::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_AcknowledgeMessage::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_AcknowledgeMessage::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_AcknowledgeMessage::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* Atom_AcknowledgeMessage::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Atom_Subscribe

// optional string action_id = 1;
inline bool Atom_Subscribe::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Subscribe::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Subscribe::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Subscribe::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_Subscribe::action_id() const {
  return *action_id_;
}
inline void Atom_Subscribe::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Subscribe::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Subscribe::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Subscribe::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_Subscribe::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string destination = 2;
inline bool Atom_Subscribe::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_Subscribe::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_Subscribe::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_Subscribe::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& Atom_Subscribe::destination() const {
  return *destination_;
}
inline void Atom_Subscribe::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Subscribe::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Subscribe::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Subscribe::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* Atom_Subscribe::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.DestinationType destination_type = 3;
inline bool Atom_Subscribe::has_destination_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_Subscribe::set_has_destination_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_Subscribe::clear_has_destination_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_Subscribe::clear_destination_type() {
  destination_type_ = 0;
  clear_has_destination_type();
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType Atom_Subscribe::destination_type() const {
  return static_cast< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType >(destination_type_);
}
inline void Atom_Subscribe::set_destination_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType value) {
  GOOGLE_DCHECK(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType_IsValid(value));
  set_has_destination_type();
  destination_type_ = value;
}

// -------------------------------------------------------------------

// Atom_Unsubscribe

// optional string action_id = 1;
inline bool Atom_Unsubscribe::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Unsubscribe::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Unsubscribe::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Unsubscribe::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_Unsubscribe::action_id() const {
  return *action_id_;
}
inline void Atom_Unsubscribe::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Unsubscribe::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Unsubscribe::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Unsubscribe::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_Unsubscribe::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string destination = 2;
inline bool Atom_Unsubscribe::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_Unsubscribe::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_Unsubscribe::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_Unsubscribe::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& Atom_Unsubscribe::destination() const {
  return *destination_;
}
inline void Atom_Unsubscribe::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Unsubscribe::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Unsubscribe::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Unsubscribe::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* Atom_Unsubscribe::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.DestinationType destination_type = 3;
inline bool Atom_Unsubscribe::has_destination_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_Unsubscribe::set_has_destination_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_Unsubscribe::clear_has_destination_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_Unsubscribe::clear_destination_type() {
  destination_type_ = 0;
  clear_has_destination_type();
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType Atom_Unsubscribe::destination_type() const {
  return static_cast< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType >(destination_type_);
}
inline void Atom_Unsubscribe::set_destination_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType value) {
  GOOGLE_DCHECK(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType_IsValid(value));
  set_has_destination_type();
  destination_type_ = value;
}

// -------------------------------------------------------------------

// Atom_Notification

// required string destination = 1;
inline bool Atom_Notification::has_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Notification::set_has_destination() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Notification::clear_has_destination() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Notification::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& Atom_Notification::destination() const {
  return *destination_;
}
inline void Atom_Notification::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Notification::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Atom_Notification::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Notification::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* Atom_Notification::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string subscription = 2;
inline bool Atom_Notification::has_subscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_Notification::set_has_subscription() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_Notification::clear_has_subscription() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_Notification::clear_subscription() {
  if (subscription_ != &::google::protobuf::internal::kEmptyString) {
    subscription_->clear();
  }
  clear_has_subscription();
}
inline const ::std::string& Atom_Notification::subscription() const {
  return *subscription_;
}
inline void Atom_Notification::set_subscription(const ::std::string& value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void Atom_Notification::set_subscription(const char* value) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(value);
}
inline void Atom_Notification::set_subscription(const char* value, size_t size) {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  subscription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Notification::mutable_subscription() {
  set_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    subscription_ = new ::std::string;
  }
  return subscription_;
}
inline ::std::string* Atom_Notification::release_subscription() {
  clear_has_subscription();
  if (subscription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subscription_;
    subscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.DestinationType destination_type = 3;
inline bool Atom_Notification::has_destination_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_Notification::set_has_destination_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_Notification::clear_has_destination_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_Notification::clear_destination_type() {
  destination_type_ = 0;
  clear_has_destination_type();
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType Atom_Notification::destination_type() const {
  return static_cast< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType >(destination_type_);
}
inline void Atom_Notification::set_destination_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType value) {
  GOOGLE_DCHECK(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType_IsValid(value));
  set_has_destination_type();
  destination_type_ = value;
}

// required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.BrokerMessage message = 4;
inline bool Atom_Notification::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Atom_Notification::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Atom_Notification::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Atom_Notification::clear_message() {
  if (message_ != NULL) message_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage::Clear();
  clear_has_message();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage& Atom_Notification::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* Atom_Notification::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage;
  return message_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* Atom_Notification::release_message() {
  clear_has_message();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_BrokerMessage* temp = message_;
  message_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Atom_Fault

// optional string action_id = 1;
inline bool Atom_Fault::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Fault::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Fault::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Fault::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_Fault::action_id() const {
  return *action_id_;
}
inline void Atom_Fault::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Fault::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Fault::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Fault::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_Fault::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fault_code = 2;
inline bool Atom_Fault::has_fault_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_Fault::set_has_fault_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_Fault::clear_has_fault_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_Fault::clear_fault_code() {
  if (fault_code_ != &::google::protobuf::internal::kEmptyString) {
    fault_code_->clear();
  }
  clear_has_fault_code();
}
inline const ::std::string& Atom_Fault::fault_code() const {
  return *fault_code_;
}
inline void Atom_Fault::set_fault_code(const ::std::string& value) {
  set_has_fault_code();
  if (fault_code_ == &::google::protobuf::internal::kEmptyString) {
    fault_code_ = new ::std::string;
  }
  fault_code_->assign(value);
}
inline void Atom_Fault::set_fault_code(const char* value) {
  set_has_fault_code();
  if (fault_code_ == &::google::protobuf::internal::kEmptyString) {
    fault_code_ = new ::std::string;
  }
  fault_code_->assign(value);
}
inline void Atom_Fault::set_fault_code(const char* value, size_t size) {
  set_has_fault_code();
  if (fault_code_ == &::google::protobuf::internal::kEmptyString) {
    fault_code_ = new ::std::string;
  }
  fault_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Fault::mutable_fault_code() {
  set_has_fault_code();
  if (fault_code_ == &::google::protobuf::internal::kEmptyString) {
    fault_code_ = new ::std::string;
  }
  return fault_code_;
}
inline ::std::string* Atom_Fault::release_fault_code() {
  clear_has_fault_code();
  if (fault_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fault_code_;
    fault_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fault_message = 3;
inline bool Atom_Fault::has_fault_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_Fault::set_has_fault_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_Fault::clear_has_fault_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_Fault::clear_fault_message() {
  if (fault_message_ != &::google::protobuf::internal::kEmptyString) {
    fault_message_->clear();
  }
  clear_has_fault_message();
}
inline const ::std::string& Atom_Fault::fault_message() const {
  return *fault_message_;
}
inline void Atom_Fault::set_fault_message(const ::std::string& value) {
  set_has_fault_message();
  if (fault_message_ == &::google::protobuf::internal::kEmptyString) {
    fault_message_ = new ::std::string;
  }
  fault_message_->assign(value);
}
inline void Atom_Fault::set_fault_message(const char* value) {
  set_has_fault_message();
  if (fault_message_ == &::google::protobuf::internal::kEmptyString) {
    fault_message_ = new ::std::string;
  }
  fault_message_->assign(value);
}
inline void Atom_Fault::set_fault_message(const char* value, size_t size) {
  set_has_fault_message();
  if (fault_message_ == &::google::protobuf::internal::kEmptyString) {
    fault_message_ = new ::std::string;
  }
  fault_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Fault::mutable_fault_message() {
  set_has_fault_message();
  if (fault_message_ == &::google::protobuf::internal::kEmptyString) {
    fault_message_ = new ::std::string;
  }
  return fault_message_;
}
inline ::std::string* Atom_Fault::release_fault_message() {
  clear_has_fault_message();
  if (fault_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fault_message_;
    fault_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fault_detail = 4;
inline bool Atom_Fault::has_fault_detail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Atom_Fault::set_has_fault_detail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Atom_Fault::clear_has_fault_detail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Atom_Fault::clear_fault_detail() {
  if (fault_detail_ != &::google::protobuf::internal::kEmptyString) {
    fault_detail_->clear();
  }
  clear_has_fault_detail();
}
inline const ::std::string& Atom_Fault::fault_detail() const {
  return *fault_detail_;
}
inline void Atom_Fault::set_fault_detail(const ::std::string& value) {
  set_has_fault_detail();
  if (fault_detail_ == &::google::protobuf::internal::kEmptyString) {
    fault_detail_ = new ::std::string;
  }
  fault_detail_->assign(value);
}
inline void Atom_Fault::set_fault_detail(const char* value) {
  set_has_fault_detail();
  if (fault_detail_ == &::google::protobuf::internal::kEmptyString) {
    fault_detail_ = new ::std::string;
  }
  fault_detail_->assign(value);
}
inline void Atom_Fault::set_fault_detail(const char* value, size_t size) {
  set_has_fault_detail();
  if (fault_detail_ == &::google::protobuf::internal::kEmptyString) {
    fault_detail_ = new ::std::string;
  }
  fault_detail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Fault::mutable_fault_detail() {
  set_has_fault_detail();
  if (fault_detail_ == &::google::protobuf::internal::kEmptyString) {
    fault_detail_ = new ::std::string;
  }
  return fault_detail_;
}
inline ::std::string* Atom_Fault::release_fault_detail() {
  clear_has_fault_detail();
  if (fault_detail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fault_detail_;
    fault_detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Atom_Ping

// required string action_id = 1;
inline bool Atom_Ping::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Ping::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Ping::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Ping::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_Ping::action_id() const {
  return *action_id_;
}
inline void Atom_Ping::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Ping::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Ping::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Ping::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_Ping::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Atom_Pong

// required string action_id = 1;
inline bool Atom_Pong::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Pong::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Pong::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Pong::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_Pong::action_id() const {
  return *action_id_;
}
inline void Atom_Pong::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Pong::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Pong::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Pong::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_Pong::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Atom_Authentication

// optional string action_id = 1;
inline bool Atom_Authentication::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Authentication::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Authentication::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Authentication::clear_action_id() {
  if (action_id_ != &::google::protobuf::internal::kEmptyString) {
    action_id_->clear();
  }
  clear_has_action_id();
}
inline const ::std::string& Atom_Authentication::action_id() const {
  return *action_id_;
}
inline void Atom_Authentication::set_action_id(const ::std::string& value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Authentication::set_action_id(const char* value) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(value);
}
inline void Atom_Authentication::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  action_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Authentication::mutable_action_id() {
  set_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    action_id_ = new ::std::string;
  }
  return action_id_;
}
inline ::std::string* Atom_Authentication::release_action_id() {
  clear_has_action_id();
  if (action_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_id_;
    action_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string authentication_type = 2;
inline bool Atom_Authentication::has_authentication_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_Authentication::set_has_authentication_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_Authentication::clear_has_authentication_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_Authentication::clear_authentication_type() {
  if (authentication_type_ != &::google::protobuf::internal::kEmptyString) {
    authentication_type_->clear();
  }
  clear_has_authentication_type();
}
inline const ::std::string& Atom_Authentication::authentication_type() const {
  return *authentication_type_;
}
inline void Atom_Authentication::set_authentication_type(const ::std::string& value) {
  set_has_authentication_type();
  if (authentication_type_ == &::google::protobuf::internal::kEmptyString) {
    authentication_type_ = new ::std::string;
  }
  authentication_type_->assign(value);
}
inline void Atom_Authentication::set_authentication_type(const char* value) {
  set_has_authentication_type();
  if (authentication_type_ == &::google::protobuf::internal::kEmptyString) {
    authentication_type_ = new ::std::string;
  }
  authentication_type_->assign(value);
}
inline void Atom_Authentication::set_authentication_type(const char* value, size_t size) {
  set_has_authentication_type();
  if (authentication_type_ == &::google::protobuf::internal::kEmptyString) {
    authentication_type_ = new ::std::string;
  }
  authentication_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Authentication::mutable_authentication_type() {
  set_has_authentication_type();
  if (authentication_type_ == &::google::protobuf::internal::kEmptyString) {
    authentication_type_ = new ::std::string;
  }
  return authentication_type_;
}
inline ::std::string* Atom_Authentication::release_authentication_type() {
  clear_has_authentication_type();
  if (authentication_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authentication_type_;
    authentication_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes token = 3;
inline bool Atom_Authentication::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_Authentication::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_Authentication::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_Authentication::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& Atom_Authentication::token() const {
  return *token_;
}
inline void Atom_Authentication::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void Atom_Authentication::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void Atom_Authentication::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Authentication::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* Atom_Authentication::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_id = 4;
inline bool Atom_Authentication::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Atom_Authentication::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Atom_Authentication::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Atom_Authentication::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& Atom_Authentication::user_id() const {
  return *user_id_;
}
inline void Atom_Authentication::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Atom_Authentication::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Atom_Authentication::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Authentication::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* Atom_Authentication::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string role = 5;
inline int Atom_Authentication::role_size() const {
  return role_.size();
}
inline void Atom_Authentication::clear_role() {
  role_.Clear();
}
inline const ::std::string& Atom_Authentication::role(int index) const {
  return role_.Get(index);
}
inline ::std::string* Atom_Authentication::mutable_role(int index) {
  return role_.Mutable(index);
}
inline void Atom_Authentication::set_role(int index, const ::std::string& value) {
  role_.Mutable(index)->assign(value);
}
inline void Atom_Authentication::set_role(int index, const char* value) {
  role_.Mutable(index)->assign(value);
}
inline void Atom_Authentication::set_role(int index, const char* value, size_t size) {
  role_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Atom_Authentication::add_role() {
  return role_.Add();
}
inline void Atom_Authentication::add_role(const ::std::string& value) {
  role_.Add()->assign(value);
}
inline void Atom_Authentication::add_role(const char* value) {
  role_.Add()->assign(value);
}
inline void Atom_Authentication::add_role(const char* value, size_t size) {
  role_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Atom_Authentication::role() const {
  return role_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Atom_Authentication::mutable_role() {
  return &role_;
}

// -------------------------------------------------------------------

// Atom_Action

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Publish publish = 1;
inline bool Atom_Action::has_publish() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom_Action::set_has_publish() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom_Action::clear_has_publish() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom_Action::clear_publish() {
  if (publish_ != NULL) publish_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish::Clear();
  clear_has_publish();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish& Atom_Action::publish() const {
  return publish_ != NULL ? *publish_ : *default_instance_->publish_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish* Atom_Action::mutable_publish() {
  set_has_publish();
  if (publish_ == NULL) publish_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish;
  return publish_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish* Atom_Action::release_publish() {
  clear_has_publish();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Publish* temp = publish_;
  publish_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Poll poll = 2;
inline bool Atom_Action::has_poll() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom_Action::set_has_poll() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom_Action::clear_has_poll() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom_Action::clear_poll() {
  if (poll_ != NULL) poll_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll::Clear();
  clear_has_poll();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll& Atom_Action::poll() const {
  return poll_ != NULL ? *poll_ : *default_instance_->poll_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll* Atom_Action::mutable_poll() {
  set_has_poll();
  if (poll_ == NULL) poll_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll;
  return poll_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll* Atom_Action::release_poll() {
  clear_has_poll();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Poll* temp = poll_;
  poll_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Accepted accepted = 3;
inline bool Atom_Action::has_accepted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Atom_Action::set_has_accepted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Atom_Action::clear_has_accepted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Atom_Action::clear_accepted() {
  if (accepted_ != NULL) accepted_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted::Clear();
  clear_has_accepted();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted& Atom_Action::accepted() const {
  return accepted_ != NULL ? *accepted_ : *default_instance_->accepted_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted* Atom_Action::mutable_accepted() {
  set_has_accepted();
  if (accepted_ == NULL) accepted_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted;
  return accepted_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted* Atom_Action::release_accepted() {
  clear_has_accepted();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Accepted* temp = accepted_;
  accepted_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.AcknowledgeMessage ack_message = 4;
inline bool Atom_Action::has_ack_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Atom_Action::set_has_ack_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Atom_Action::clear_has_ack_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Atom_Action::clear_ack_message() {
  if (ack_message_ != NULL) ack_message_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage::Clear();
  clear_has_ack_message();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage& Atom_Action::ack_message() const {
  return ack_message_ != NULL ? *ack_message_ : *default_instance_->ack_message_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage* Atom_Action::mutable_ack_message() {
  set_has_ack_message();
  if (ack_message_ == NULL) ack_message_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage;
  return ack_message_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage* Atom_Action::release_ack_message() {
  clear_has_ack_message();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_AcknowledgeMessage* temp = ack_message_;
  ack_message_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Subscribe subscribe = 5;
inline bool Atom_Action::has_subscribe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Atom_Action::set_has_subscribe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Atom_Action::clear_has_subscribe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Atom_Action::clear_subscribe() {
  if (subscribe_ != NULL) subscribe_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe::Clear();
  clear_has_subscribe();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe& Atom_Action::subscribe() const {
  return subscribe_ != NULL ? *subscribe_ : *default_instance_->subscribe_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe* Atom_Action::mutable_subscribe() {
  set_has_subscribe();
  if (subscribe_ == NULL) subscribe_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe;
  return subscribe_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe* Atom_Action::release_subscribe() {
  clear_has_subscribe();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Subscribe* temp = subscribe_;
  subscribe_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Unsubscribe unsubscribe = 6;
inline bool Atom_Action::has_unsubscribe() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Atom_Action::set_has_unsubscribe() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Atom_Action::clear_has_unsubscribe() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Atom_Action::clear_unsubscribe() {
  if (unsubscribe_ != NULL) unsubscribe_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe::Clear();
  clear_has_unsubscribe();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe& Atom_Action::unsubscribe() const {
  return unsubscribe_ != NULL ? *unsubscribe_ : *default_instance_->unsubscribe_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe* Atom_Action::mutable_unsubscribe() {
  set_has_unsubscribe();
  if (unsubscribe_ == NULL) unsubscribe_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe;
  return unsubscribe_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe* Atom_Action::release_unsubscribe() {
  clear_has_unsubscribe();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Unsubscribe* temp = unsubscribe_;
  unsubscribe_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Notification notification = 7;
inline bool Atom_Action::has_notification() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Atom_Action::set_has_notification() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Atom_Action::clear_has_notification() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Atom_Action::clear_notification() {
  if (notification_ != NULL) notification_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification::Clear();
  clear_has_notification();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification& Atom_Action::notification() const {
  return notification_ != NULL ? *notification_ : *default_instance_->notification_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification* Atom_Action::mutable_notification() {
  set_has_notification();
  if (notification_ == NULL) notification_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification;
  return notification_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification* Atom_Action::release_notification() {
  clear_has_notification();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Notification* temp = notification_;
  notification_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Fault fault = 8;
inline bool Atom_Action::has_fault() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Atom_Action::set_has_fault() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Atom_Action::clear_has_fault() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Atom_Action::clear_fault() {
  if (fault_ != NULL) fault_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault::Clear();
  clear_has_fault();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault& Atom_Action::fault() const {
  return fault_ != NULL ? *fault_ : *default_instance_->fault_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault* Atom_Action::mutable_fault() {
  set_has_fault();
  if (fault_ == NULL) fault_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault;
  return fault_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault* Atom_Action::release_fault() {
  clear_has_fault();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Fault* temp = fault_;
  fault_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Ping ping = 9;
inline bool Atom_Action::has_ping() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Atom_Action::set_has_ping() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Atom_Action::clear_has_ping() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Atom_Action::clear_ping() {
  if (ping_ != NULL) ping_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping::Clear();
  clear_has_ping();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping& Atom_Action::ping() const {
  return ping_ != NULL ? *ping_ : *default_instance_->ping_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping* Atom_Action::mutable_ping() {
  set_has_ping();
  if (ping_ == NULL) ping_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping;
  return ping_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping* Atom_Action::release_ping() {
  clear_has_ping();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Ping* temp = ping_;
  ping_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Pong pong = 10;
inline bool Atom_Action::has_pong() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Atom_Action::set_has_pong() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Atom_Action::clear_has_pong() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Atom_Action::clear_pong() {
  if (pong_ != NULL) pong_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong::Clear();
  clear_has_pong();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong& Atom_Action::pong() const {
  return pong_ != NULL ? *pong_ : *default_instance_->pong_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong* Atom_Action::mutable_pong() {
  set_has_pong();
  if (pong_ == NULL) pong_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong;
  return pong_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong* Atom_Action::release_pong() {
  clear_has_pong();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Pong* temp = pong_;
  pong_ = NULL;
  return temp;
}

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Authentication auth = 11;
inline bool Atom_Action::has_auth() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Atom_Action::set_has_auth() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Atom_Action::clear_has_auth() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Atom_Action::clear_auth() {
  if (auth_ != NULL) auth_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication::Clear();
  clear_has_auth();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication& Atom_Action::auth() const {
  return auth_ != NULL ? *auth_ : *default_instance_->auth_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication* Atom_Action::mutable_auth() {
  set_has_auth();
  if (auth_ == NULL) auth_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication;
  return auth_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication* Atom_Action::release_auth() {
  clear_has_auth();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Authentication* temp = auth_;
  auth_ = NULL;
  return temp;
}

// required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Action.ActionType action_type = 12;
inline bool Atom_Action::has_action_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Atom_Action::set_has_action_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Atom_Action::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Atom_Action::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action_ActionType Atom_Action::action_type() const {
  return static_cast< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action_ActionType >(action_type_);
}
inline void Atom_Action::set_action_type(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action_ActionType value) {
  GOOGLE_DCHECK(::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action_ActionType_IsValid(value));
  set_has_action_type();
  action_type_ = value;
}

// -------------------------------------------------------------------

// Atom

// optional .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Header header = 1;
inline bool Atom::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Atom::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Atom::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Atom::clear_header() {
  if (header_ != NULL) header_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header::Clear();
  clear_has_header();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header& Atom::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header* Atom::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header;
  return header_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header* Atom::release_header() {
  clear_has_header();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Header* temp = header_;
  header_ = NULL;
  return temp;
}

// required .SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom.Action action = 2;
inline bool Atom::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Atom::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Atom::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Atom::clear_action() {
  if (action_ != NULL) action_->::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action::Clear();
  clear_has_action();
}
inline const ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action& Atom::action() const {
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action* Atom::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action;
  return action_;
}
inline ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action* Atom::release_action() {
  clear_has_action();
  ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action* temp = action_;
  action_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtobufXS
}  // namespace Autogen
}  // namespace Codecs
}  // namespace Broker
}  // namespace SAPO

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action_ActionType>() {
  return ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_Action_ActionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType>() {
  return ::SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom_DestinationType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_broker_2eproto__INCLUDED
