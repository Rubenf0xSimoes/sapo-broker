SAPO-Broker version 0.6
========================

SAPO Broker perl client bindings.

 See:
    http://softwarelivre.sapo.pt/broker
    http://softwarelivre.sapo.pt/projects/broker/wiki/Clients/Perl

 Installing

  From Source

The simples way is to checkout the most recent code from the svn repository

svn co svn://softwarelivre.sapo.pt/broker/trunk/clients/perl-component

and the just build it.

cd perl-component && perl Makefile.PL

ATENTION: To add support to Thrift and/or Protobuf you may have to recompile
the bindings to your system. To do so:

./autogen_protobufxs.pl
./autogen_thrift.pl

or

./autogen_protobuf_thrift.pl

answer the questions (you must select at least one of thrift or protobuf codecs,
otherwise the makefile won't be written).

Finally just make and install

make install
Dependencies
Thrift

If you chose to install  thrift support then you will need to install it. To do
so you should get the  latest release version and just install the perl module.

The build process should be similar to:
wget 'http://www.apache.org/dist//incubator/thrift/XXX-incubating/thrift-XXX.tar.gz'

tar -xzf thrift-XXX.tar.gz
cd thrift-XXX/lib/perl/
perl Makefile.PL
#you may need to install dependencies from CPAN
make
sudo make install
Protobuf

If you chose to install  protobuf support then you will need to install the
protobuf development libraries. Most distributions will have these packages but
in case your's doesn't you can always  compile and install them from source.
wget 'http://protobuf.googlecode.com/files/protobuf-XXX.tar.bz2'
tar -xjf protobuf-XXX.tar.bz2
cd protobuf-XXX
./configure
make
sudo make install

 Testing

The build process also runs the tests. By default tests connect to the broker in
localhost. You can change this for a broker server running in another host by
setting the environment variable BROKER_HOST.

If the test broker doesn't have SSL support you should define
BROKER_DISABLE_SSL to 1.

 Usage

Example usage files can be found in the examples directory.

  Simplest Usage

The simples production code is:
use SAPO::Broker::Clients::Simple;

        use strict;
        use warnings;

        my $broker = SAPO::Broker::Clients::Simple->new(host=>'localhost', proto=>'tcp');
        #connects to localhost using tcp by default (can also use udp or ssl)

        my %options = (
            'destination_type' => 'QUEUE', #can also be TOPIC
            'destination' => '/tests/perl',
        );

       #to produce
       $broker->publish(%options, 'payload' => "This is the payload");

       #to consume
       $broker->subscribe(%options, auto_acknowledge => 1); #auto_acknowledge makes life simpler
       my $notification = $broker->receive;
       my $payload = $notification->message->payload;

The implementation here is splitted in two sub-projects

 libsapo-broker is a shared library to access the SAPO Broker.
 libsapo-brokerxs-perl is a perl(XS) library that uses libsapo-broker

 sapo-broker-agent is meant as an example application more than
  something really usefull, specially because its features are
  already implemented by the Perl POE client.

 COPYRIGHT AND LICENCE

Put the correct copyright and licence information here.

 Copyright (C) 2010 by Cl√°udio Valente
