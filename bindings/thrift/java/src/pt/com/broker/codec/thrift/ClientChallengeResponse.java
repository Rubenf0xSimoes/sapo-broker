/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package pt.com.broker.codec.thrift;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

public class ClientChallengeResponse implements TBase, java.io.Serializable, Cloneable
{
	private static final TStruct STRUCT_DESC = new TStruct("ClientChallengeResponse");
	private static final TField COMMUNICATION_ID_FIELD_DESC = new TField("communication_id", TType.STRING, (short) 1);
	private static final TField CHALLENGE_FIELD_DESC = new TField("challenge", TType.STRING, (short) 2);

	public String communication_id;
	public static final int COMMUNICATION_ID = 1;
	public byte[] challenge;
	public static final int CHALLENGE = 2;

	private final Isset __isset = new Isset();

	private static final class Isset implements java.io.Serializable
	{
	}

	public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>()
	{
		{
			put(COMMUNICATION_ID, new FieldMetaData("communication_id", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
			put(CHALLENGE, new FieldMetaData("challenge", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
		}
	});

	static
	{
		FieldMetaData.addStructMetaDataMap(ClientChallengeResponse.class, metaDataMap);
	}

	public ClientChallengeResponse()
	{
	}

	public ClientChallengeResponse(String communication_id, byte[] challenge)
	{
		this();
		this.communication_id = communication_id;
		this.challenge = challenge;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ClientChallengeResponse(ClientChallengeResponse other)
	{
		if (other.isSetCommunication_id())
		{
			this.communication_id = other.communication_id;
		}
		if (other.isSetChallenge())
		{
			this.challenge = new byte[other.challenge.length];
			System.arraycopy(other.challenge, 0, challenge, 0, other.challenge.length);
		}
	}

	@Override
	public ClientChallengeResponse clone()
	{
		return new ClientChallengeResponse(this);
	}

	public String getCommunication_id()
	{
		return this.communication_id;
	}

	public void setCommunication_id(String communication_id)
	{
		this.communication_id = communication_id;
	}

	public void unsetCommunication_id()
	{
		this.communication_id = null;
	}

	// Returns true if field communication_id is set (has been asigned a value)
	// and false otherwise
	public boolean isSetCommunication_id()
	{
		return this.communication_id != null;
	}

	public void setCommunication_idIsSet(boolean value)
	{
		if (!value)
		{
			this.communication_id = null;
		}
	}

	public byte[] getChallenge()
	{
		return this.challenge;
	}

	public void setChallenge(byte[] challenge)
	{
		this.challenge = challenge;
	}

	public void unsetChallenge()
	{
		this.challenge = null;
	}

	// Returns true if field challenge is set (has been asigned a value) and
	// false otherwise
	public boolean isSetChallenge()
	{
		return this.challenge != null;
	}

	public void setChallengeIsSet(boolean value)
	{
		if (!value)
		{
			this.challenge = null;
		}
	}

	public void setFieldValue(int fieldID, Object value)
	{
		switch (fieldID)
		{
		case COMMUNICATION_ID:
			setCommunication_id((String) value);
			break;

		case CHALLENGE:
			setChallenge((byte[]) value);
			break;

		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	public Object getFieldValue(int fieldID)
	{
		switch (fieldID)
		{
		case COMMUNICATION_ID:
			return getCommunication_id();

		case CHALLENGE:
			return getChallenge();

		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	// Returns true if field corresponding to fieldID is set (has been asigned a
	// value) and false otherwise
	public boolean isSet(int fieldID)
	{
		switch (fieldID)
		{
		case COMMUNICATION_ID:
			return isSetCommunication_id();
		case CHALLENGE:
			return isSetChallenge();
		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	@Override
	public boolean equals(Object that)
	{
		if (that == null)
			return false;
		if (that instanceof ClientChallengeResponse)
			return this.equals((ClientChallengeResponse) that);
		return false;
	}

	public boolean equals(ClientChallengeResponse that)
	{
		if (that == null)
			return false;

		boolean this_present_communication_id = true && this.isSetCommunication_id();
		boolean that_present_communication_id = true && that.isSetCommunication_id();
		if (this_present_communication_id || that_present_communication_id)
		{
			if (!(this_present_communication_id && that_present_communication_id))
				return false;
			if (!this.communication_id.equals(that.communication_id))
				return false;
		}

		boolean this_present_challenge = true && this.isSetChallenge();
		boolean that_present_challenge = true && that.isSetChallenge();
		if (this_present_challenge || that_present_challenge)
		{
			if (!(this_present_challenge && that_present_challenge))
				return false;
			if (!java.util.Arrays.equals(this.challenge, that.challenge))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode()
	{
		return 0;
	}

	public void read(TProtocol iprot) throws TException
	{
		TField field;
		iprot.readStructBegin();
		while (true)
		{
			field = iprot.readFieldBegin();
			if (field.type == TType.STOP)
			{
				break;
			}
			switch (field.id)
			{
			case COMMUNICATION_ID:
				if (field.type == TType.STRING)
				{
					this.communication_id = iprot.readString();
				}
				else
				{
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case CHALLENGE:
				if (field.type == TType.STRING)
				{
					this.challenge = iprot.readBinary();
				}
				else
				{
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			default:
				TProtocolUtil.skip(iprot, field.type);
				break;
			}
			iprot.readFieldEnd();
		}
		iprot.readStructEnd();

		// check for required fields of primitive type, which can't be checked
		// in the validate method
		validate();
	}

	public void write(TProtocol oprot) throws TException
	{
		validate();

		oprot.writeStructBegin(STRUCT_DESC);
		if (this.communication_id != null)
		{
			oprot.writeFieldBegin(COMMUNICATION_ID_FIELD_DESC);
			oprot.writeString(this.communication_id);
			oprot.writeFieldEnd();
		}
		if (this.challenge != null)
		{
			oprot.writeFieldBegin(CHALLENGE_FIELD_DESC);
			oprot.writeBinary(this.challenge);
			oprot.writeFieldEnd();
		}
		oprot.writeFieldStop();
		oprot.writeStructEnd();
	}

	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder("ClientChallengeResponse(");
		boolean first = true;

		sb.append("communication_id:");
		if (this.communication_id == null)
		{
			sb.append("null");
		}
		else
		{
			sb.append(this.communication_id);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("challenge:");
		if (this.challenge == null)
		{
			sb.append("null");
		}
		else
		{
			int __challenge_size = Math.min(this.challenge.length, 128);
			for (int i = 0; i < __challenge_size; i++)
			{
				if (i != 0)
					sb.append(" ");
				sb.append(Integer.toHexString(this.challenge[i]).length() > 1 ? Integer.toHexString(this.challenge[i]).substring(Integer.toHexString(this.challenge[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.challenge[i]).toUpperCase());
			}
			if (this.challenge.length > 128)
				sb.append(" ...");
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws TException
	{
		// check for required fields
		// check that fields of type enum have valid values
	}

}
