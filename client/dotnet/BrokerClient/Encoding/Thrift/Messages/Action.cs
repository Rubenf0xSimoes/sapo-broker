/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace SapoBrokerClient.Encoding.Thrift.Messages
{

  [Serializable]
  public partial class Action : TBase
  {
    private Publish publish;
    private Poll poll;
    private Accepted accepted;
    private Acknowledge ack_message;
    private Subscribe subscribe;
    private Unsubscribe unsubscribe;
    private Notification notification;
    private Fault fault;
    private Ping ping;
    private Pong pong;
    private Authentication auth;
    private ActionType action_type;

    public Publish Publish
    {
      get
      {
        return publish;
      }
      set
      {
        __isset.publish = true;
        this.publish = value;
      }
    }

    public Poll Poll
    {
      get
      {
        return poll;
      }
      set
      {
        __isset.poll = true;
        this.poll = value;
      }
    }

    public Accepted Accepted
    {
      get
      {
        return accepted;
      }
      set
      {
        __isset.accepted = true;
        this.accepted = value;
      }
    }

    public Acknowledge Ack_message
    {
      get
      {
        return ack_message;
      }
      set
      {
        __isset.ack_message = true;
        this.ack_message = value;
      }
    }

    public Subscribe Subscribe
    {
      get
      {
        return subscribe;
      }
      set
      {
        __isset.subscribe = true;
        this.subscribe = value;
      }
    }

    public Unsubscribe Unsubscribe
    {
      get
      {
        return unsubscribe;
      }
      set
      {
        __isset.unsubscribe = true;
        this.unsubscribe = value;
      }
    }

    public Notification Notification
    {
      get
      {
        return notification;
      }
      set
      {
        __isset.notification = true;
        this.notification = value;
      }
    }

    public Fault Fault
    {
      get
      {
        return fault;
      }
      set
      {
        __isset.fault = true;
        this.fault = value;
      }
    }

    public Ping Ping
    {
      get
      {
        return ping;
      }
      set
      {
        __isset.ping = true;
        this.ping = value;
      }
    }

    public Pong Pong
    {
      get
      {
        return pong;
      }
      set
      {
        __isset.pong = true;
        this.pong = value;
      }
    }

    public Authentication Auth
    {
      get
      {
        return auth;
      }
      set
      {
        __isset.auth = true;
        this.auth = value;
      }
    }

    public ActionType Action_type
    {
      get
      {
        return action_type;
      }
      set
      {
        __isset.action_type = true;
        this.action_type = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool publish;
      public bool poll;
      public bool accepted;
      public bool ack_message;
      public bool subscribe;
      public bool unsubscribe;
      public bool notification;
      public bool fault;
      public bool ping;
      public bool pong;
      public bool auth;
      public bool action_type;
    }

    public Action() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              this.publish = new Publish();
              this.publish.Read(iprot);
              this.__isset.publish = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              this.poll = new Poll();
              this.poll.Read(iprot);
              this.__isset.poll = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              this.accepted = new Accepted();
              this.accepted.Read(iprot);
              this.__isset.accepted = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              this.ack_message = new Acknowledge();
              this.ack_message.Read(iprot);
              this.__isset.ack_message = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              this.subscribe = new Subscribe();
              this.subscribe.Read(iprot);
              this.__isset.subscribe = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              this.unsubscribe = new Unsubscribe();
              this.unsubscribe.Read(iprot);
              this.__isset.unsubscribe = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              this.notification = new Notification();
              this.notification.Read(iprot);
              this.__isset.notification = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              this.fault = new Fault();
              this.fault.Read(iprot);
              this.__isset.fault = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              this.ping = new Ping();
              this.ping.Read(iprot);
              this.__isset.ping = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              this.pong = new Pong();
              this.pong.Read(iprot);
              this.__isset.pong = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              this.auth = new Authentication();
              this.auth.Read(iprot);
              this.__isset.auth = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              this.action_type = (ActionType)iprot.ReadI32();
              this.__isset.action_type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Action");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.publish != null && __isset.publish) {
        field.Name = "publish";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        this.publish.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.poll != null && __isset.poll) {
        field.Name = "poll";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        this.poll.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.accepted != null && __isset.accepted) {
        field.Name = "accepted";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        this.accepted.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.ack_message != null && __isset.ack_message) {
        field.Name = "ack_message";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        this.ack_message.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.subscribe != null && __isset.subscribe) {
        field.Name = "subscribe";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        this.subscribe.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.unsubscribe != null && __isset.unsubscribe) {
        field.Name = "unsubscribe";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        this.unsubscribe.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.notification != null && __isset.notification) {
        field.Name = "notification";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        this.notification.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.fault != null && __isset.fault) {
        field.Name = "fault";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        this.fault.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.ping != null && __isset.ping) {
        field.Name = "ping";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        this.ping.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.pong != null && __isset.pong) {
        field.Name = "pong";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        this.pong.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.auth != null && __isset.auth) {
        field.Name = "auth";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        this.auth.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.action_type) {
        field.Name = "action_type";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.action_type);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Action(");
      sb.Append("publish: ");
      sb.Append(this.publish== null ? "<null>" : this.publish.ToString());
      sb.Append(",poll: ");
      sb.Append(this.poll== null ? "<null>" : this.poll.ToString());
      sb.Append(",accepted: ");
      sb.Append(this.accepted== null ? "<null>" : this.accepted.ToString());
      sb.Append(",ack_message: ");
      sb.Append(this.ack_message== null ? "<null>" : this.ack_message.ToString());
      sb.Append(",subscribe: ");
      sb.Append(this.subscribe== null ? "<null>" : this.subscribe.ToString());
      sb.Append(",unsubscribe: ");
      sb.Append(this.unsubscribe== null ? "<null>" : this.unsubscribe.ToString());
      sb.Append(",notification: ");
      sb.Append(this.notification== null ? "<null>" : this.notification.ToString());
      sb.Append(",fault: ");
      sb.Append(this.fault== null ? "<null>" : this.fault.ToString());
      sb.Append(",ping: ");
      sb.Append(this.ping== null ? "<null>" : this.ping.ToString());
      sb.Append(",pong: ");
      sb.Append(this.pong== null ? "<null>" : this.pong.ToString());
      sb.Append(",auth: ");
      sb.Append(this.auth== null ? "<null>" : this.auth.ToString());
      sb.Append(",action_type: ");
      sb.Append(this.action_type);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
